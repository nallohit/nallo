/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.nallo.invenmejorado;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Base64;
import java.util.Calendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.CellEditor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nallo
 */
public class Index extends javax.swing.JFrame {

    private float totalGeneral = 0;
    private float descuentoGeneral = 0;
    private String comingfrom = null;
    private String Usuario = null;
    private String goingto = null;
    private boolean administrador = false;
    
    private float totalGas=0;
    private float totalGan=0;
    /**
     * Creates new form Index
     */
    public Index() {
        initComponents();
        
       
       
        setFacturaVendedor();
        
         tiempo();
        Timer timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Llamar a la función que se quiere ejecutar cada segundo
                tiempo();
            }
        });
        // Iniciar el timer
        timer.start();
    }
 
    private void tiempo(){
        
         Calendar calendar = Calendar.getInstance();
        // Establecer el locale en español
        Locale locale = new Locale("es", "DR");
        // Obtener los nombres de los meses y días de la semana en español
        DateFormatSymbols symbols = new DateFormatSymbols(locale);
        // Obtener el nombre del mes actual
        String monthName = symbols.getMonths()[calendar.get(Calendar.MONTH)];
        // Obtener el nombre del día de la semana actual
        String dayOfWeekName = symbols.getWeekdays()[calendar.get(Calendar.DAY_OF_WEEK)];
        // Obtener el número del día del mes actual
        String dayOfMonth = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));
        // Obtener el año actual
        String year = String.valueOf(calendar.get(Calendar.YEAR));
        
        LocalTime horaActual = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String horaActualFormateada = horaActual.format(formatter);
        
        // Asignar valores a los JLabel
        lblHora2.setText(horaActualFormateada);
        lblDiaSemana2.setText(dayOfWeekName.toUpperCase());
        lblDiaMes2.setText(dayOfMonth);
        lblMesAnio2.setText(monthName.toUpperCase());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogPAgotados = new javax.swing.JDialog();
        panelTitleAgotados = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblAgotados = new javax.swing.JTable();
        dialogUserInv = new javax.swing.JDialog();
        jPanel23 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        lblUser2 = new javax.swing.JLabel();
        txtUserInv = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtPassInv = new javax.swing.JPasswordField();
        jPanel26 = new javax.swing.JPanel();
        btnEntrarInv = new javax.swing.JButton();
        lblWrongPassInv = new javax.swing.JLabel();
        dialogUserV = new javax.swing.JDialog();
        jPanel18 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        lblUser1 = new javax.swing.JLabel();
        txtUserV = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtPassV = new javax.swing.JPasswordField();
        jPanel29 = new javax.swing.JPanel();
        btnEntrarV = new javax.swing.JButton();
        lblWrongPass = new javax.swing.JLabel();
        dialogBuscar = new javax.swing.JDialog();
        panelFondo = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        txtProBuscar = new javax.swing.JTextField();
        panelTablaBuscar = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblBuscar = new javax.swing.JTable();
        dialogUser = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        panelFormu = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        lblUser = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtPass = new javax.swing.JPasswordField();
        jPanel31 = new javax.swing.JPanel();
        btnIdentificacion = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        lblWrongPass1 = new javax.swing.JLabel();
        dialogUsers = new javax.swing.JDialog();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        txtUssChange = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        txtPssChange = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        dialogSetUsers = new javax.swing.JDialog();
        jPanel34 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        jPanel35 = new javax.swing.JPanel();
        txtCU = new javax.swing.JTextField();
        txtCP = new javax.swing.JTextField();
        itemCPV = new javax.swing.JComboBox<>();
        jPanel36 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        dialogAddGastos = new javax.swing.JDialog();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jPanel40 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        txtpen = new javax.swing.JTextField();
        txtpr = new javax.swing.JTextField();
        txtpl = new javax.swing.JTextField();
        txtps = new javax.swing.JTextField();
        txtpo = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        dialogCompras = new javax.swing.JDialog();
        panelFondoCompras = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jPanel44 = new javax.swing.JPanel();
        panelFechas = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        txtFecha1C = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        txtFecha2C = new javax.swing.JTextField();
        jPanel45 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblComprasRealizadas = new javax.swing.JTable();
        jPanel48 = new javax.swing.JPanel();
        txtCPr = new javax.swing.JTextField();
        jPanel46 = new javax.swing.JPanel();
        txtCC = new javax.swing.JTextField();
        txtCPC = new javax.swing.JTextField();
        txtCPV = new javax.swing.JTextField();
        txtCV = new javax.swing.JTextField();
        jPanel47 = new javax.swing.JPanel();
        txtHiddenCan = new javax.swing.JTextField();
        txtCId = new javax.swing.JTextField();
        btnConC = new javax.swing.JButton();
        txtHiddenPro = new javax.swing.JTextField();
        btnApdateC = new javax.swing.JButton();
        panelIndex = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        panelRefriV1 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btnIrAVender = new javax.swing.JButton();
        btnIrAInventario = new javax.swing.JButton();
        btnIrAVentas = new javax.swing.JButton();
        btnIrAContabilidad = new javax.swing.JButton();
        btnIrAddInventario = new javax.swing.JButton();
        btnIrAFacturas = new javax.swing.JButton();
        btnSetUser = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel50 = new javax.swing.JPanel();
        lblPAgotado6 = new javax.swing.JLabel();
        panelVender = new javax.swing.JPanel();
        panelTituloV = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelRefriV = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        panelFormulario2 = new javax.swing.JPanel();
        lblFactura2 = new javax.swing.JLabel();
        txtFacturaV = new javax.swing.JTextField();
        txtClienteV = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtVendedorV = new javax.swing.JTextField();
        panelFechaV = new javax.swing.JPanel();
        lblMesAnio2 = new javax.swing.JLabel();
        lblDiaMes2 = new javax.swing.JLabel();
        lblDiaSemana2 = new javax.swing.JLabel();
        lblHora2 = new javax.swing.JLabel();
        panelFV = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        txtProductoV = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        txtCode = new javax.swing.JTextField();
        spCantidad = new javax.swing.JSpinner();
        txtPrecio = new javax.swing.JTextField();
        btnAddToCarV = new javax.swing.JButton();
        panelTableV = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCarritoV = new javax.swing.JTable();
        panelBotonesV = new javax.swing.JPanel();
        btnBackV = new javax.swing.JButton();
        btnVentasV = new javax.swing.JButton();
        btnCancelarV = new javax.swing.JButton();
        btnDescuentoV = new javax.swing.JButton();
        btnConfirmarV = new javax.swing.JButton();
        panelTotales = new javax.swing.JPanel();
        panelSubtotalV = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        panelDescuentoV = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblTotal1 = new javax.swing.JLabel();
        panelTotalV = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        lblTotal2 = new javax.swing.JLabel();
        panelInventario = new javax.swing.JPanel();
        panelTituloInventario = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        panelTablaInventario = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulosI = new javax.swing.JTable();
        panelTotalYGanciasEstimadas = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        lblTotalProductos = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblGananciaEstimada = new javax.swing.JLabel();
        panelAddP = new javax.swing.JPanel();
        btnAddInv = new javax.swing.JButton();
        panelBotonesInventario = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnFacturas = new javax.swing.JButton();
        btnCompras = new javax.swing.JButton();
        btnContabilidadI = new javax.swing.JButton();
        btnVenderI = new javax.swing.JButton();
        panelProductosAgotandose = new javax.swing.JPanel();
        lblPAgotado = new javax.swing.JLabel();
        panelVentas = new javax.swing.JPanel();
        panelSuperiorVentas = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        panelFiltrosVentas = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtProductoVentas = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCodigoVentas = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtClienteVentas = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtFechaDesdeVentas = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtFechaHastaVentas = new javax.swing.JTextField();
        panelTablaVentas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVentas = new javax.swing.JTable();
        panelBotonesVentas = new javax.swing.JPanel();
        btnBackVentas = new javax.swing.JButton();
        btnVenderVentas = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        panelTotalVentas = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        lblTotalN = new javax.swing.JLabel();
        panelContabilidad = new javax.swing.JPanel();
        panelHeaderC = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        panelProductosC = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblProductosC = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        panelGastosC = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblGastos = new javax.swing.JTable();
        panelFechasC = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtFechaDC = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtFechaHC = new javax.swing.JTextField();
        panelBAdd = new javax.swing.JPanel();
        btnAddGastos = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        lblTotalG = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        btnBackCont = new javax.swing.JButton();
        panelAddInventario = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblCP = new javax.swing.JTable();
        panelTotalAdd = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        lblTotalAdd = new javax.swing.JLabel();
        panelForm = new javax.swing.JPanel();
        txtProd = new javax.swing.JTextField();
        txtCan = new javax.swing.JTextField();
        txtPC = new javax.swing.JTextField();
        txtPV = new javax.swing.JTextField();
        txtV = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        btnAddP = new javax.swing.JButton();
        panelBot = new javax.swing.JPanel();
        btnBackAddInv = new javax.swing.JButton();
        btncancellBuy = new javax.swing.JButton();
        btnConfirmBuy = new javax.swing.JButton();
        panelFactura = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        txtFacturaF = new javax.swing.JTextField();
        itemFact = new javax.swing.JComboBox<>();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblFacturas = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        btnCancelarFact = new javax.swing.JButton();
        btnBackF = new javax.swing.JButton();

        dialogPAgotados.setMinimumSize(new java.awt.Dimension(600, 400));
        dialogPAgotados.setModal(true);
        dialogPAgotados.setSize(new java.awt.Dimension(600, 400));
        dialogPAgotados.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogPAgotadosWindowOpened(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Productos agontandose o agotados");
        panelTitleAgotados.add(jLabel23);

        tblAgotados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Producto", "Codigo", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tblAgotados);

        javax.swing.GroupLayout dialogPAgotadosLayout = new javax.swing.GroupLayout(dialogPAgotados.getContentPane());
        dialogPAgotados.getContentPane().setLayout(dialogPAgotadosLayout);
        dialogPAgotadosLayout.setHorizontalGroup(
            dialogPAgotadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
            .addGroup(dialogPAgotadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTitleAgotados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        dialogPAgotadosLayout.setVerticalGroup(
            dialogPAgotadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPAgotadosLayout.createSequentialGroup()
                .addComponent(panelTitleAgotados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        dialogUserInv.setMaximumSize(new java.awt.Dimension(400, 400));
        dialogUserInv.setMinimumSize(new java.awt.Dimension(400, 400));
        dialogUserInv.setModal(true);
        dialogUserInv.setPreferredSize(new java.awt.Dimension(400, 400));
        dialogUserInv.setResizable(false);
        dialogUserInv.setSize(new java.awt.Dimension(400, 400));
        dialogUserInv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogUserInvWindowClosing(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel24.setText("Indentificacion");
        jPanel23.add(jLabel24);

        jPanel25.setLayout(new java.awt.GridLayout(4, 1));

        lblUser2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUser2.setText("Usuario");
        jPanel25.add(lblUser2);

        txtUserInv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel25.add(txtUserInv);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Contraseña");
        jPanel25.add(jLabel33);

        txtPassInv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel25.add(txtPassInv);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel25, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        btnEntrarInv.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEntrarInv.setText("Entrar");
        btnEntrarInv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnEntrarInvMouseReleased(evt);
            }
        });
        jPanel26.add(btnEntrarInv);

        javax.swing.GroupLayout dialogUserInvLayout = new javax.swing.GroupLayout(dialogUserInv.getContentPane());
        dialogUserInv.getContentPane().setLayout(dialogUserInvLayout);
        dialogUserInvLayout.setHorizontalGroup(
            dialogUserInvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dialogUserInvLayout.createSequentialGroup()
                .addGroup(dialogUserInvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogUserInvLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(dialogUserInvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(dialogUserInvLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblWrongPassInv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        dialogUserInvLayout.setVerticalGroup(
            dialogUserInvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogUserInvLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblWrongPassInv, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        dialogUserV.setMaximumSize(new java.awt.Dimension(400, 400));
        dialogUserV.setMinimumSize(new java.awt.Dimension(400, 400));
        dialogUserV.setModal(true);
        dialogUserV.setPreferredSize(new java.awt.Dimension(400, 400));
        dialogUserV.setResizable(false);
        dialogUserV.setSize(new java.awt.Dimension(400, 400));
        dialogUserV.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogUserVWindowClosing(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel34.setText("Quien va a vender?");
        jPanel18.add(jLabel34);

        jPanel28.setLayout(new java.awt.GridLayout(4, 1));

        lblUser1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUser1.setText("Usuario");
        jPanel28.add(lblUser1);

        txtUserV.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel28.add(txtUserV);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("Contraseña");
        jPanel28.add(jLabel35);

        txtPassV.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel28.add(txtPassV);

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jPanel28, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel28, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        btnEntrarV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEntrarV.setText("Entrar");
        btnEntrarV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnEntrarVMouseReleased(evt);
            }
        });
        jPanel29.add(btnEntrarV);

        lblWrongPass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout dialogUserVLayout = new javax.swing.GroupLayout(dialogUserV.getContentPane());
        dialogUserV.getContentPane().setLayout(dialogUserVLayout);
        dialogUserVLayout.setHorizontalGroup(
            dialogUserVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dialogUserVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogUserVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblWrongPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogUserVLayout.setVerticalGroup(
            dialogUserVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogUserVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWrongPass, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        dialogBuscar.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogBuscar.setBounds(new java.awt.Rectangle(500, 300, 500, 500));
        dialogBuscar.setModal(true);
        dialogBuscar.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                dialogBuscarWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogBuscarWindowOpened(evt);
            }
        });

        jLabel36.setText("Producto");

        txtProBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProBuscarKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtProBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProBuscar)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblBuscar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Codigo", "Cantidad", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBuscarMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblBuscar);

        javax.swing.GroupLayout panelTablaBuscarLayout = new javax.swing.GroupLayout(panelTablaBuscar);
        panelTablaBuscar.setLayout(panelTablaBuscarLayout);
        panelTablaBuscarLayout.setHorizontalGroup(
            panelTablaBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE))
        );
        panelTablaBuscarLayout.setVerticalGroup(
            panelTablaBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTablaBuscarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTablaBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelTablaBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogBuscarLayout = new javax.swing.GroupLayout(dialogBuscar.getContentPane());
        dialogBuscar.getContentPane().setLayout(dialogBuscarLayout);
        dialogBuscarLayout.setHorizontalGroup(
            dialogBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogBuscarLayout.setVerticalGroup(
            dialogBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dialogUser.setMaximumSize(new java.awt.Dimension(400, 400));
        dialogUser.setMinimumSize(new java.awt.Dimension(400, 400));
        dialogUser.setModal(true);
        dialogUser.setPreferredSize(new java.awt.Dimension(400, 400));
        dialogUser.setResizable(false);
        dialogUser.setSize(new java.awt.Dimension(400, 400));
        dialogUser.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogUserWindowClosing(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel37.setText("Identificacion");
        jPanel8.add(jLabel37);

        jPanel30.setLayout(new java.awt.GridLayout(4, 1));

        lblUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUser.setText("Usuario");
        jPanel30.add(lblUser);

        txtUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel30.add(txtUser);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("Contraseña");
        jPanel30.add(jLabel38);

        txtPass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel30.add(txtPass);

        javax.swing.GroupLayout panelFormuLayout = new javax.swing.GroupLayout(panelFormu);
        panelFormu.setLayout(panelFormuLayout);
        panelFormuLayout.setHorizontalGroup(
            panelFormuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormuLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        panelFormuLayout.setVerticalGroup(
            panelFormuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        btnIdentificacion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnIdentificacion.setText("Entrar");
        btnIdentificacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIdentificacionMouseClicked(evt);
            }
        });
        jPanel31.add(btnIdentificacion);

        lblWrongPass1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel32.add(lblWrongPass1);

        javax.swing.GroupLayout dialogUserLayout = new javax.swing.GroupLayout(dialogUser.getContentPane());
        dialogUser.getContentPane().setLayout(dialogUserLayout);
        dialogUserLayout.setHorizontalGroup(
            dialogUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dialogUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFormu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogUserLayout.setVerticalGroup(
            dialogUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFormu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        dialogUsers.setMaximumSize(new java.awt.Dimension(400, 300));
        dialogUsers.setMinimumSize(new java.awt.Dimension(400, 300));
        dialogUsers.setModal(true);
        dialogUsers.setPreferredSize(new java.awt.Dimension(400, 300));
        dialogUsers.setResizable(false);
        dialogUsers.setSize(new java.awt.Dimension(400, 300));
        dialogUsers.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                dialogUsersWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        dialogUsers.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogUsersWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogUsersWindowOpened(evt);
            }
        });

        jPanel14.setMaximumSize(new java.awt.Dimension(346, 211));
        jPanel14.setMinimumSize(new java.awt.Dimension(346, 211));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Configuracion de usuario");
        jPanel15.add(jLabel29);

        jLabel30.setText("Usuario");

        txtUssChange.setEditable(false);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtUssChange, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtUssChange))
                .addContainerGap())
        );

        jLabel39.setText("Contraseña nueva");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPssChange, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPssChange))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel33.setLayout(new java.awt.GridLayout(1, 0, 50, 0));

        btnCancel.setText("Cancelar");
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        jPanel33.add(btnCancel);

        btnSave.setText("Guardar cambios");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });
        jPanel33.add(btnSave);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        javax.swing.GroupLayout dialogUsersLayout = new javax.swing.GroupLayout(dialogUsers.getContentPane());
        dialogUsers.getContentPane().setLayout(dialogUsersLayout);
        dialogUsersLayout.setHorizontalGroup(
            dialogUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogUsersLayout.setVerticalGroup(
            dialogUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogUsersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogSetUsers.setMinimumSize(new java.awt.Dimension(639, 360));
        dialogSetUsers.setModal(true);
        dialogSetUsers.setSize(new java.awt.Dimension(639, 360));
        dialogSetUsers.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogSetUsersWindowOpened(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Administrar usuarios");
        jPanel34.add(jLabel40);

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Usuario", "Contraseña", "Privilegio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tblUsers);

        jPanel35.setLayout(new java.awt.GridLayout());
        jPanel35.add(txtCU);
        jPanel35.add(txtCP);

        itemCPV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vendedor", "Administrador" }));
        jPanel35.add(itemCPV);

        jPanel36.setLayout(new java.awt.GridLayout(1, 0, 200, 0));

        jButton3.setText("Cancelar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jPanel36.add(jButton3);

        jButton4.setText("Confirmar");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jPanel36.add(jButton4);

        jPanel37.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout dialogSetUsersLayout = new javax.swing.GroupLayout(dialogSetUsers.getContentPane());
        dialogSetUsers.getContentPane().setLayout(dialogSetUsersLayout);
        dialogSetUsersLayout.setHorizontalGroup(
            dialogSetUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogSetUsersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogSetUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogSetUsersLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                    .addComponent(jPanel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogSetUsersLayout.setVerticalGroup(
            dialogSetUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogSetUsersLayout.createSequentialGroup()
                .addComponent(jPanel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jPanel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dialogAddGastos.setMinimumSize(new java.awt.Dimension(730, 300));
        dialogAddGastos.setModal(true);
        dialogAddGastos.setPreferredSize(new java.awt.Dimension(730, 300));
        dialogAddGastos.setSize(new java.awt.Dimension(730, 300));

        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel41.setText("Agregar gastos del mes");
        jPanel39.add(jLabel41);

        jPanel40.setLayout(new java.awt.GridLayout(2, 6));

        jLabel42.setText("Pago de empleados");
        jLabel42.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel42);

        jLabel43.setText("Pago de renta");
        jLabel43.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel43);

        jLabel44.setText("Gastos de limpieza");
        jLabel44.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel44);

        jLabel45.setText("Pago de servicios");
        jLabel45.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel45);

        jLabel46.setText("Otros");
        jLabel46.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel46);

        jLabel47.setText("Fecha");
        jLabel47.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel40.add(jLabel47);
        jPanel40.add(txtpen);
        jPanel40.add(txtpr);
        jPanel40.add(txtpl);
        jPanel40.add(txtps);
        jPanel40.add(txtpo);
        jPanel40.add(txtFecha);

        btnAgregar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });
        jPanel41.add(btnAgregar);

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel38Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel39, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel41, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel40, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel38Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jPanel40, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogAddGastosLayout = new javax.swing.GroupLayout(dialogAddGastos.getContentPane());
        dialogAddGastos.getContentPane().setLayout(dialogAddGastosLayout);
        dialogAddGastosLayout.setHorizontalGroup(
            dialogAddGastosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel38, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogAddGastosLayout.setVerticalGroup(
            dialogAddGastosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dialogCompras.setMinimumSize(new java.awt.Dimension(817, 600));
        dialogCompras.setModal(true);
        dialogCompras.setPreferredSize(new java.awt.Dimension(817, 606));
        dialogCompras.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dialogComprasFocusGained(evt);
            }
        });
        dialogCompras.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                dialogComprasWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogComprasWindowOpened(evt);
            }
        });

        panelFondoCompras.setMinimumSize(new java.awt.Dimension(500, 500));

        jLabel48.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel48.setText("Compras realizadas");
        jPanel43.add(jLabel48);

        jLabel49.setText("Fecha inicial");

        jLabel50.setText("Fecha final");

        txtFecha2C.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFecha2CKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelFechasLayout = new javax.swing.GroupLayout(panelFechas);
        panelFechas.setLayout(panelFechasLayout);
        panelFechasLayout.setHorizontalGroup(
            panelFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txtFecha1C, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFecha2C, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelFechasLayout.setVerticalGroup(
            panelFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFecha2C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFecha1C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel44Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelFechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel44Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelFechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );

        tblComprasRealizadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Vendidos", "Precio de compra", "Precio de venta", "Vendedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComprasRealizadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblComprasRealizadasMouseClicked(evt);
            }
        });
        tblComprasRealizadas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblComprasRealizadasKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(tblComprasRealizadas);
        if (tblComprasRealizadas.getColumnModel().getColumnCount() > 0) {
            tblComprasRealizadas.getColumnModel().getColumn(0).setMinWidth(200);
            tblComprasRealizadas.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblComprasRealizadas.getColumnModel().getColumn(1).setMinWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(1).setMaxWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(2).setMinWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(2).setMaxWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(3).setMinWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(3).setMaxWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(4).setMinWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(4).setPreferredWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(4).setMaxWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(5).setMinWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(5).setPreferredWidth(100);
            tblComprasRealizadas.getColumnModel().getColumn(5).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel45Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11)
                .addContainerGap())
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel48.setName(""); // NOI18N
        jPanel48.setLayout(new java.awt.GridLayout());

        txtCPr.setEditable(false);
        txtCPr.setMinimumSize(new java.awt.Dimension(200, 22));
        txtCPr.setName(""); // NOI18N
        txtCPr.setPreferredSize(new java.awt.Dimension(200, 22));
        txtCPr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCPrKeyReleased(evt);
            }
        });
        jPanel48.add(txtCPr);

        jPanel46.setMaximumSize(new java.awt.Dimension(500, 22));
        jPanel46.setMinimumSize(new java.awt.Dimension(500, 22));
        jPanel46.setPreferredSize(new java.awt.Dimension(500, 22));
        jPanel46.setLayout(new java.awt.GridLayout(1, 4, 10, 0));
        jPanel46.add(txtCC);

        txtCPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPCActionPerformed(evt);
            }
        });
        jPanel46.add(txtCPC);
        jPanel46.add(txtCPV);
        jPanel46.add(txtCV);

        txtHiddenCan.setVisible(false);

        //txtHiddenCan.setVisible(false);
        txtCId.setVisible(false);

        btnConC.setText("Confirmar");
        btnConC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConCMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addComponent(txtHiddenCan, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCId, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConC)
                .addGap(17, 17, 17))
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnConC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel47Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHiddenCan, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCId, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        txtHiddenPro.setEditable(false);
        txtHiddenPro.setFocusable(false);

        btnApdateC.setText("Actualizar");
        btnApdateC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnApdateCMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelFondoComprasLayout = new javax.swing.GroupLayout(panelFondoCompras);
        panelFondoCompras.setLayout(panelFondoComprasLayout);
        panelFondoComprasLayout.setHorizontalGroup(
            panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelFondoComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelFondoComprasLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnApdateC, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtHiddenPro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel47, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFondoComprasLayout.createSequentialGroup()
                        .addComponent(jPanel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel46, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        panelFondoComprasLayout.setVerticalGroup(
            panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoComprasLayout.createSequentialGroup()
                .addComponent(jPanel43, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel44, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel46, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jPanel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelFondoComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelFondoComprasLayout.createSequentialGroup()
                            .addComponent(jPanel47, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFondoComprasLayout.createSequentialGroup()
                            .addComponent(txtHiddenPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16)))
                    .addGroup(panelFondoComprasLayout.createSequentialGroup()
                        .addComponent(btnApdateC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout dialogComprasLayout = new javax.swing.GroupLayout(dialogCompras.getContentPane());
        dialogCompras.getContentPane().setLayout(dialogComprasLayout);
        dialogComprasLayout.setHorizontalGroup(
            dialogComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondoCompras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogComprasLayout.setVerticalGroup(
            dialogComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFondoCompras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Refricentro el rubio");
        getContentPane().setLayout(new java.awt.CardLayout());

        panelIndex.setBackground(new java.awt.Color(153, 255, 255));

        jLabel52.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel52.setText("Principal");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        panelRefriV1.setBackground(new java.awt.Color(0, 153, 255));

        jLabel51.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel51.setText("Refricento El Rubio");
        panelRefriV1.add(jLabel51);

        jPanel6.setBackground(new java.awt.Color(153, 255, 255));
        jPanel6.setLayout(new java.awt.GridLayout(2, 3, 100, 100));

        btnIrAVender.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAVender.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAVender.setText("Vender");
        btnIrAVender.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAVender.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAVenderMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAVender);

        btnIrAInventario.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAInventario.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAInventario.setText("Inventario");
        btnIrAInventario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAInventarioMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAInventario);

        btnIrAVentas.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAVentas.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAVentas.setText("Ventas");
        btnIrAVentas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAVentasMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAVentas);

        btnIrAContabilidad.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAContabilidad.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAContabilidad.setText("Contabilidad");
        btnIrAContabilidad.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAContabilidad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAContabilidadMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAContabilidad);

        btnIrAddInventario.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAddInventario.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAddInventario.setText("Añadir productos");
        btnIrAddInventario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAddInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAddInventarioMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAddInventario);

        btnIrAFacturas.setBackground(new java.awt.Color(51, 204, 255));
        btnIrAFacturas.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnIrAFacturas.setText("Facturas");
        btnIrAFacturas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnIrAFacturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIrAFacturasMouseReleased(evt);
            }
        });
        jPanel6.add(btnIrAFacturas);

        btnSetUser.setBackground(new java.awt.Color(51, 204, 255));
        btnSetUser.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnSetUser.setText("Ajuste de usuario");
        btnSetUser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSetUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnSetUserMouseReleased(evt);
            }
        });
        jPanel6.add(btnSetUser);

        btnExit.setBackground(new java.awt.Color(51, 204, 255));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnExit.setText("Salir");
        btnExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnExitMouseReleased(evt);
            }
        });
        jPanel6.add(btnExit);

        lblPAgotado6.setText("Productos agotandose(0)");
        lblPAgotado6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblPAgotado6MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel50Layout = new javax.swing.GroupLayout(jPanel50);
        jPanel50.setLayout(jPanel50Layout);
        jPanel50Layout.setHorizontalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel50Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPAgotado6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel50Layout.setVerticalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel50Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPAgotado6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelIndexLayout = new javax.swing.GroupLayout(panelIndex);
        panelIndex.setLayout(panelIndexLayout);
        panelIndexLayout.setHorizontalGroup(
            panelIndexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelRefriV1, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
            .addGroup(panelIndexLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIndexLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelIndexLayout.setVerticalGroup(
            panelIndexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIndexLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelRefriV1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addGap(37, 37, 37)
                .addComponent(jPanel50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelIndex, "card2");

        panelTituloV.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTituloV.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Venta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 308, 0, 332);
        panelTituloV.add(jLabel1, gridBagConstraints);

        panelRefriV.setBackground(new java.awt.Color(0, 153, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Refricento El Rubio");
        panelRefriV.add(jLabel3);

        panelFormulario2.setBackground(new java.awt.Color(0, 204, 255));
        panelFormulario2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblFactura2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblFactura2.setText("Factura#");

        txtFacturaV.setEditable(false);
        txtFacturaV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacturaVActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Cliente");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setText("Vendedor");

        txtVendedorV.setEditable(false);

        lblMesAnio2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMesAnio2.setText("ABRIL 2023");

        lblDiaMes2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDiaMes2.setText("27");

        lblDiaSemana2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDiaSemana2.setText("JUEVES");

        lblHora2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHora2.setText("10:24:44 PM");

        javax.swing.GroupLayout panelFechaVLayout = new javax.swing.GroupLayout(panelFechaV);
        panelFechaV.setLayout(panelFechaVLayout);
        panelFechaVLayout.setHorizontalGroup(
            panelFechaVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechaVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFechaVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMesAnio2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDiaMes2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDiaSemana2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHora2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelFechaVLayout.setVerticalGroup(
            panelFechaVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechaVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMesAnio2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDiaMes2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDiaSemana2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHora2)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelFormulario2Layout = new javax.swing.GroupLayout(panelFormulario2);
        panelFormulario2.setLayout(panelFormulario2Layout);
        panelFormulario2Layout.setHorizontalGroup(
            panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormulario2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFactura2)
                    .addComponent(jLabel2)
                    .addComponent(jLabel21))
                .addGap(18, 18, 18)
                .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtClienteV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVendedorV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFacturaV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelFechaV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        panelFormulario2Layout.setVerticalGroup(
            panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormulario2Layout.createSequentialGroup()
                .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFormulario2Layout.createSequentialGroup()
                        .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFactura2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFacturaV, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtClienteV, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelFormulario2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtVendedorV, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panelFechaV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        txtProductoV.setPreferredSize(new java.awt.Dimension(200, 22));
        txtProductoV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProductoVKeyReleased(evt);
            }
        });
        jPanel10.add(txtProductoV);

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        txtCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodeKeyReleased(evt);
            }
        });
        jPanel11.add(txtCode);

        spCantidad.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spCantidad.setFocusCycleRoot(true);
        spCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spCantidadKeyPressed(evt);
            }
        });
        jPanel11.add(spCantidad);

        txtPrecio.setEditable(false);
        jPanel11.add(txtPrecio);

        btnAddToCarV.setText("Agregar");
        btnAddToCarV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddToCarVMouseReleased(evt);
            }
        });
        jPanel11.add(btnAddToCarV);

        javax.swing.GroupLayout panelFVLayout = new javax.swing.GroupLayout(panelFV);
        panelFV.setLayout(panelFVLayout);
        panelFVLayout.setHorizontalGroup(
            panelFVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFVLayout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelFVLayout.setVerticalGroup(
            panelFVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFVLayout.createSequentialGroup()
                .addGroup(panelFVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelTableV.setBackground(new java.awt.Color(204, 255, 255));

        tblCarritoV.setBackground(new java.awt.Color(204, 255, 255));
        tblCarritoV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Producto", "Codigo", "Cantidad", "Precio", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCarritoV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCarritoVKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblCarritoV);
        if (tblCarritoV.getColumnModel().getColumnCount() > 0) {
            tblCarritoV.getColumnModel().getColumn(0).setMinWidth(64);
            tblCarritoV.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblCarritoV.getColumnModel().getColumn(1).setMinWidth(109);
            tblCarritoV.getColumnModel().getColumn(1).setPreferredWidth(109);
            tblCarritoV.getColumnModel().getColumn(1).setMaxWidth(109);
            tblCarritoV.getColumnModel().getColumn(2).setMinWidth(109);
            tblCarritoV.getColumnModel().getColumn(2).setPreferredWidth(109);
            tblCarritoV.getColumnModel().getColumn(2).setMaxWidth(109);
            tblCarritoV.getColumnModel().getColumn(3).setMinWidth(109);
            tblCarritoV.getColumnModel().getColumn(3).setPreferredWidth(109);
            tblCarritoV.getColumnModel().getColumn(3).setMaxWidth(109);
            tblCarritoV.getColumnModel().getColumn(4).setMinWidth(109);
            tblCarritoV.getColumnModel().getColumn(4).setPreferredWidth(109);
            tblCarritoV.getColumnModel().getColumn(4).setMaxWidth(109);
        }

        javax.swing.GroupLayout panelTableVLayout = new javax.swing.GroupLayout(panelTableV);
        panelTableV.setLayout(panelTableVLayout);
        panelTableVLayout.setHorizontalGroup(
            panelTableVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        panelTableVLayout.setVerticalGroup(
            panelTableVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        panelBotonesV.setBackground(new java.awt.Color(204, 204, 255));
        panelBotonesV.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        btnBackV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBackV.setText("Atras");
        btnBackV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackVMouseReleased(evt);
            }
        });
        panelBotonesV.add(btnBackV);

        btnVentasV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnVentasV.setText("Ventas");
        btnVentasV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnVentasVMouseReleased(evt);
            }
        });
        panelBotonesV.add(btnVentasV);

        btnCancelarV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancelarV.setText("Cancelar");
        btnCancelarV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCancelarVMouseReleased(evt);
            }
        });
        btnCancelarV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVActionPerformed(evt);
            }
        });
        panelBotonesV.add(btnCancelarV);

        btnDescuentoV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDescuentoV.setText("Descuento");
        btnDescuentoV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnDescuentoVMouseReleased(evt);
            }
        });
        panelBotonesV.add(btnDescuentoV);

        btnConfirmarV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnConfirmarV.setText("Confirmar");
        btnConfirmarV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnConfirmarVMouseReleased(evt);
            }
        });
        panelBotonesV.add(btnConfirmarV);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("SubTotal");

        lblTotal.setText("0.00");

        javax.swing.GroupLayout panelSubtotalVLayout = new javax.swing.GroupLayout(panelSubtotalV);
        panelSubtotalV.setLayout(panelSubtotalVLayout);
        panelSubtotalVLayout.setHorizontalGroup(
            panelSubtotalVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSubtotalVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
        );
        panelSubtotalVLayout.setVerticalGroup(
            panelSubtotalVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Descuento");

        lblTotal1.setText("0.00");

        javax.swing.GroupLayout panelDescuentoVLayout = new javax.swing.GroupLayout(panelDescuentoV);
        panelDescuentoV.setLayout(panelDescuentoVLayout);
        panelDescuentoVLayout.setHorizontalGroup(
            panelDescuentoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDescuentoVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelDescuentoVLayout.setVerticalGroup(
            panelDescuentoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDescuentoVLayout.createSequentialGroup()
                .addGroup(panelDescuentoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel22.setText("Total");

        lblTotal2.setText("0.00");

        javax.swing.GroupLayout panelTotalVLayout = new javax.swing.GroupLayout(panelTotalV);
        panelTotalV.setLayout(panelTotalVLayout);
        panelTotalVLayout.setHorizontalGroup(
            panelTotalVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelTotalVLayout.setVerticalGroup(
            panelTotalVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout panelTotalesLayout = new javax.swing.GroupLayout(panelTotales);
        panelTotales.setLayout(panelTotalesLayout);
        panelTotalesLayout.setHorizontalGroup(
            panelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSubtotalV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelDescuentoV, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelTotalV, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTotalesLayout.setVerticalGroup(
            panelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSubtotalV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDescuentoV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTotalV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelVenderLayout = new javax.swing.GroupLayout(panelVender);
        panelVender.setLayout(panelVenderLayout);
        panelVenderLayout.setHorizontalGroup(
            panelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVenderLayout.createSequentialGroup()
                .addGroup(panelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVenderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelTituloV, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                            .addComponent(panelTableV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelRefriV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelFormulario2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelFV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelVenderLayout.createSequentialGroup()
                        .addComponent(panelBotonesV, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelVenderLayout.setVerticalGroup(
            panelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVenderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTituloV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelRefriV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFormulario2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTableV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelBotonesV, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(panelVender, "card3");

        panelTituloInventario.setAlignmentX(10.0F);
        panelTituloInventario.setAlignmentY(10.0F);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setText("Inventario");
        panelTituloInventario.add(jLabel10);

        panelTablaInventario.setBackground(new java.awt.Color(204, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 255));

        tblArticulosI.setAutoCreateRowSorter(true);
        tblArticulosI.setBackground(new java.awt.Color(204, 255, 255));
        tblArticulosI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Codigo", "Cantidad", "Vendidos", "Precio de compra", "Precio de venta", "Observacion", "Descuento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArticulosI.setColumnSelectionAllowed(true);
        tblArticulosI.getTableHeader().setReorderingAllowed(false);
        tblArticulosI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblArticulosIKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblArticulosIKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblArticulosI);
        tblArticulosI.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tblArticulosI.getColumnModel().getColumnCount() > 0) {
            tblArticulosI.getColumnModel().getColumn(0).setPreferredWidth(300);
        }

        javax.swing.GroupLayout panelTablaInventarioLayout = new javax.swing.GroupLayout(panelTablaInventario);
        panelTablaInventario.setLayout(panelTablaInventarioLayout);
        panelTablaInventarioLayout.setHorizontalGroup(
            panelTablaInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaInventarioLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelTablaInventarioLayout.setVerticalGroup(
            panelTablaInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
        );

        panelTotalYGanciasEstimadas.setLayout(new java.awt.GridLayout(1, 0));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Total de productos:");
        panelTotalYGanciasEstimadas.add(jLabel11);

        lblTotalProductos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotalProductos.setText("0");
        panelTotalYGanciasEstimadas.add(lblTotalProductos);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Ganancia estimada:");
        panelTotalYGanciasEstimadas.add(jLabel12);

        lblGananciaEstimada.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblGananciaEstimada.setText("0");
        panelTotalYGanciasEstimadas.add(lblGananciaEstimada);

        panelAddP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnAddInv.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddInv.setText("Añadir productos");
        btnAddInv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddInvMouseReleased(evt);
            }
        });
        btnAddInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvActionPerformed(evt);
            }
        });
        panelAddP.add(btnAddInv);

        panelBotonesInventario.setLayout(new java.awt.GridLayout(1, 0, 20, 1));

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBack.setText("Atras");
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackMouseReleased(evt);
            }
        });
        panelBotonesInventario.add(btnBack);

        btnFacturas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnFacturas.setText("Facturas");
        btnFacturas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnFacturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnFacturasMouseReleased(evt);
            }
        });
        panelBotonesInventario.add(btnFacturas);

        btnCompras.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCompras.setText("Compras");
        btnCompras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnComprasMouseReleased(evt);
            }
        });
        panelBotonesInventario.add(btnCompras);

        btnContabilidadI.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnContabilidadI.setText("Contabilidad");
        btnContabilidadI.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnContabilidadI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnContabilidadIMouseReleased(evt);
            }
        });
        panelBotonesInventario.add(btnContabilidadI);

        btnVenderI.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnVenderI.setText("Vender");
        btnVenderI.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnVenderI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnVenderIMouseReleased(evt);
            }
        });
        panelBotonesInventario.add(btnVenderI);

        panelProductosAgotandose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelProductosAgotandoseMouseReleased(evt);
            }
        });

        lblPAgotado.setText("Productos agotandose(0)");
        lblPAgotado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblPAgotadoMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelProductosAgotandoseLayout = new javax.swing.GroupLayout(panelProductosAgotandose);
        panelProductosAgotandose.setLayout(panelProductosAgotandoseLayout);
        panelProductosAgotandoseLayout.setHorizontalGroup(
            panelProductosAgotandoseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProductosAgotandoseLayout.createSequentialGroup()
                .addComponent(lblPAgotado, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelProductosAgotandoseLayout.setVerticalGroup(
            panelProductosAgotandoseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProductosAgotandoseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPAgotado, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelInventarioLayout = new javax.swing.GroupLayout(panelInventario);
        panelInventario.setLayout(panelInventarioLayout);
        panelInventarioLayout.setHorizontalGroup(
            panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInventarioLayout.createSequentialGroup()
                        .addComponent(panelBotonesInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelProductosAgotandose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelTituloInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTotalYGanciasEstimadas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelAddP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTablaInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelInventarioLayout.setVerticalGroup(
            panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTituloInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelTablaInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16)
                .addComponent(panelTotalYGanciasEstimadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelAddP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelProductosAgotandose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBotonesInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        getContentPane().add(panelInventario, "card4");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Ventas realizadas");
        panelSuperiorVentas.add(jLabel13);

        panelFiltrosVentas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelFiltrosVentas.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Filtrar venta por");
        jPanel2.add(jLabel14, java.awt.BorderLayout.NORTH);

        panelFiltrosVentas.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Producto");
        jPanel3.add(jLabel15);

        txtProductoVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtProductoVentasMouseReleased(evt);
            }
        });
        txtProductoVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProductoVentasKeyPressed(evt);
            }
        });
        jPanel3.add(txtProductoVentas);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Codigo");
        jPanel3.add(jLabel16);

        txtCodigoVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtCodigoVentasMouseReleased(evt);
            }
        });
        txtCodigoVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoVentasKeyPressed(evt);
            }
        });
        jPanel3.add(txtCodigoVentas);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Cliente");
        jPanel3.add(jLabel17);

        txtClienteVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtClienteVentasMouseReleased(evt);
            }
        });
        txtClienteVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtClienteVentasKeyPressed(evt);
            }
        });
        jPanel3.add(txtClienteVentas);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Fecha desde");
        jPanel3.add(jLabel18);

        txtFechaDesdeVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtFechaDesdeVentasMouseReleased(evt);
            }
        });
        txtFechaDesdeVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaDesdeVentasKeyPressed(evt);
            }
        });
        jPanel3.add(txtFechaDesdeVentas);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Hasta");
        jPanel3.add(jLabel19);

        txtFechaHastaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtFechaHastaVentasMouseReleased(evt);
            }
        });
        txtFechaHastaVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaHastaVentasKeyPressed(evt);
            }
        });
        jPanel3.add(txtFechaHastaVentas);

        panelFiltrosVentas.add(jPanel3, java.awt.BorderLayout.SOUTH);

        tblVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Producto", "Codigo", "Cantidad", "Precio", "Total", "Descuento", "Numero de factura", "Cliente", "Vendedor", "Fecha y Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVentasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblVentas);

        javax.swing.GroupLayout panelTablaVentasLayout = new javax.swing.GroupLayout(panelTablaVentas);
        panelTablaVentas.setLayout(panelTablaVentasLayout);
        panelTablaVentasLayout.setHorizontalGroup(
            panelTablaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        panelTablaVentasLayout.setVerticalGroup(
            panelTablaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTablaVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelBotonesVentas.setLayout(new java.awt.GridLayout(1, 0, 10, 100));

        btnBackVentas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBackVentas.setText("Atras");
        btnBackVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackVentasMouseReleased(evt);
            }
        });
        panelBotonesVentas.add(btnBackVentas);

        btnVenderVentas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnVenderVentas.setText("Vender");
        btnVenderVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnVenderVentasMouseReleased(evt);
            }
        });
        panelBotonesVentas.add(btnVenderVentas);

        btnImprimir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnImprimir.setText("Imprimir factura seleccionada");
        btnImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnImprimirMouseReleased(evt);
            }
        });
        panelBotonesVentas.add(btnImprimir);

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnActualizar.setText("Actualizar lista");
        btnActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnActualizarMouseReleased(evt);
            }
        });
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        panelBotonesVentas.add(btnActualizar);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel20.setText("Total de ventas: ");

        lblTotalN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotalN.setText("0.00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(lblTotalN, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(lblTotalN))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelTotalVentasLayout = new javax.swing.GroupLayout(panelTotalVentas);
        panelTotalVentas.setLayout(panelTotalVentasLayout);
        panelTotalVentasLayout.setHorizontalGroup(
            panelTotalVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTotalVentasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelTotalVentasLayout.setVerticalGroup(
            panelTotalVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalVentasLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout panelVentasLayout = new javax.swing.GroupLayout(panelVentas);
        panelVentas.setLayout(panelVentasLayout);
        panelVentasLayout.setHorizontalGroup(
            panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSuperiorVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTablaVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVentasLayout.createSequentialGroup()
                .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVentasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelFiltrosVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelVentasLayout.createSequentialGroup()
                        .addComponent(panelBotonesVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(panelTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelVentasLayout.setVerticalGroup(
            panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVentasLayout.createSequentialGroup()
                .addComponent(panelSuperiorVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFiltrosVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTablaVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBotonesVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTotalVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(panelVentas, "card5");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Contabilidad");
        panelHeaderC.add(jLabel4);

        panelProductosC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblProductosC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Productos comprados", "Inversiones en productos", "Productos vendidos", "Ganancias de productos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblProductosC);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Productos");
        jPanel5.add(jLabel5);

        javax.swing.GroupLayout panelProductosCLayout = new javax.swing.GroupLayout(panelProductosC);
        panelProductosC.setLayout(panelProductosCLayout);
        panelProductosCLayout.setHorizontalGroup(
            panelProductosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductosCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProductosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelProductosCLayout.setVerticalGroup(
            panelProductosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductosCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panelGastosC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Gastos");
        jPanel9.add(jLabel6);

        tblGastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Pago de empleados", "Pago de renta", "Productos de limpieza", "Pago de servicios", "Otros", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblGastos);

        javax.swing.GroupLayout panelGastosCLayout = new javax.swing.GroupLayout(panelGastosC);
        panelGastosC.setLayout(panelGastosCLayout);
        panelGastosCLayout.setHorizontalGroup(
            panelGastosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGastosCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGastosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGastosCLayout.setVerticalGroup(
            panelGastosCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGastosCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setText("Desde");

        txtFechaDC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaDCKeyPressed(evt);
            }
        });

        jLabel25.setText("Hasta");

        txtFechaHC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaHCKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelFechasCLayout = new javax.swing.GroupLayout(panelFechasC);
        panelFechasC.setLayout(panelFechasCLayout);
        panelFechasCLayout.setHorizontalGroup(
            panelFechasCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFechasCLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFechaDC, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtFechaHC, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        panelFechasCLayout.setVerticalGroup(
            panelFechasCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFechasCLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(panelFechasCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtFechaDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(txtFechaHC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnAddGastos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddGastos.setText("Agregar gastos");
        btnAddGastos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddGastosMouseReleased(evt);
            }
        });
        panelBAdd.add(btnAddGastos);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setText("Ganancias:");

        lblTotalG.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTotalG.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        btnBackCont.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackCont.setText("Atras");
        btnBackCont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackContMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel42Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBackCont, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel42Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBackCont, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelContabilidadLayout = new javax.swing.GroupLayout(panelContabilidad);
        panelContabilidad.setLayout(panelContabilidadLayout);
        panelContabilidadLayout.setHorizontalGroup(
            panelContabilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContabilidadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContabilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelFechasC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelHeaderC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProductosC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelGastosC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContabilidadLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalG, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelContabilidadLayout.createSequentialGroup()
                        .addComponent(jPanel42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelContabilidadLayout.setVerticalGroup(
            panelContabilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContabilidadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelHeaderC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(panelFechasC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelProductosC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelGastosC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelContabilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelContabilidadLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelContabilidadLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalG, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelBAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelContabilidad, "card6");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel27.setText("Añadir productos");
        jPanel12.add(jLabel27);

        tblCP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Precio de compra", "Precio de venta", "Vendedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblCPKeyPressed(evt);
            }
        });
        jScrollPane6.setViewportView(tblCP);

        jLabel28.setText("Total:");

        lblTotalAdd.setText("0");

        javax.swing.GroupLayout panelTotalAddLayout = new javax.swing.GroupLayout(panelTotalAdd);
        panelTotalAdd.setLayout(panelTotalAddLayout);
        panelTotalAddLayout.setHorizontalGroup(
            panelTotalAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTotalAddLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel28)
                .addGap(18, 18, 18)
                .addComponent(lblTotalAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelTotalAddLayout.setVerticalGroup(
            panelTotalAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTotalAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTotalAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(lblTotalAdd))
                .addContainerGap())
        );

        panelForm.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        txtProd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProdKeyReleased(evt);
            }
        });
        panelForm.add(txtProd);
        panelForm.add(txtCan);

        txtPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPCActionPerformed(evt);
            }
        });
        panelForm.add(txtPC);
        panelForm.add(txtPV);
        panelForm.add(txtV);

        btnAddP.setText("Añadir");
        btnAddP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddPMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddP, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(btnAddP)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelBot.setLayout(new java.awt.GridLayout(1, 0, 30, 20));

        btnBackAddInv.setText("Atras");
        btnBackAddInv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackAddInvMouseReleased(evt);
            }
        });
        panelBot.add(btnBackAddInv);

        btncancellBuy.setText("Cancelar compra");
        btncancellBuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btncancellBuyMouseReleased(evt);
            }
        });
        panelBot.add(btncancellBuy);

        btnConfirmBuy.setText("Confirmar compra");
        btnConfirmBuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnConfirmBuyMouseReleased(evt);
            }
        });
        panelBot.add(btnConfirmBuy);

        javax.swing.GroupLayout panelAddInventarioLayout = new javax.swing.GroupLayout(panelAddInventario);
        panelAddInventario.setLayout(panelAddInventarioLayout);
        panelAddInventarioLayout.setHorizontalGroup(
            panelAddInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelAddInventarioLayout.createSequentialGroup()
                .addGroup(panelAddInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelAddInventarioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE))
                    .addGroup(panelAddInventarioLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(panelBot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelForm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelAddInventarioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelTotalAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelAddInventarioLayout.setVerticalGroup(
            panelAddInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addComponent(panelTotalAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelAddInventario, "card7");

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel31.setText("Facturas");
        jPanel19.add(jLabel31);

        jLabel32.setText("Factura#");

        txtFacturaF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFacturaFKeyReleased(evt);
            }
        });

        itemFact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activas", "Todas", "Canceladas" }));
        itemFact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemFactItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFacturaF, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(itemFact, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFacturaF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemFact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel21.setBackground(new java.awt.Color(204, 255, 255));

        tblFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Factura", "Cliente", "Vendedor", "Recibido", "Devuelta", "Fecha y hora", "Total", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFacturas.setColumnSelectionAllowed(true);
        tblFacturas.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tblFacturas);
        tblFacturas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jPanel22.setBackground(new java.awt.Color(204, 204, 255));

        btnCancelarFact.setText("Cancelar factura");
        btnCancelarFact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCancelarFactMouseReleased(evt);
            }
        });
        btnCancelarFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarFactActionPerformed(evt);
            }
        });

        btnBackF.setText("Atras");
        btnBackF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBackFMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBackF, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(btnCancelarFact, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnBackF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelarFact, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelFacturaLayout = new javax.swing.GroupLayout(panelFactura);
        panelFactura.setLayout(panelFacturaLayout);
        panelFacturaLayout.setHorizontalGroup(
            panelFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFacturaLayout.createSequentialGroup()
                .addGroup(panelFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelFacturaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelFacturaLayout.setVerticalGroup(
            panelFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFacturaLayout.createSequentialGroup()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(panelFactura, "card8");

        pack();
    }// </editor-fold>                        

   
    private void btnIrAVenderMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        comingfrom = "index";
        dialogUserV.setVisible(true);
        
        
    }                                          

    private void tblVentasMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void btnIrAInventarioMouseReleased(java.awt.event.MouseEvent evt) {                                               
        // TODO add your handling code here:
        goingto = "inventario";
        comingfrom = "index";
        dialogUserInv.setVisible(true);
        
    }                                              

    private void txtFacturaVActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void btnCancelarVActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void btnIrAVentasMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        comingfrom = "index";
        panelIndex.show(false);
        panelVentas.show(true);
        setFechaVentas();
        
    }                                          

    private void btnIrAContabilidadMouseReleased(java.awt.event.MouseEvent evt) {                                                 
        // TODO add your handling code here:
        goingto = "contabilidad";
        comingfrom = "index";
        dialogUserInv.setVisible(true);
       
    }                                                

    private void txtProdKeyPressed(java.awt.event.KeyEvent evt) {                                   
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchCodeP(txtProd.getText());
            
        }

    }                                  

    private void txtProdKeyReleased(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handling code here:
        String text = txtProd.getText();
        if (!text.isEmpty()) {
            txtProd.setText(text.substring(0, 1).toUpperCase() + text.substring(1));
        }
    }                                   

    private void txtPCActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void btnIrAddInventarioMouseReleased(java.awt.event.MouseEvent evt) {                                                 
        // TODO add your handling code here:
        goingto = "addinventario";
        comingfrom = "index";
        dialogUserInv.setVisible(true);
        
        
    }                                                

    private void btnBackMouseReleased(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        panelInventario.show(false);
        panelIndex.show(true);
       
    }                                     

    private void txtCodeKeyReleased(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BuscarCodigo(txtCode.getText());
            
        }else{
            txtProductoV.setText("");
            spCantidad.setValue(0);
            txtPrecio.setText("");
        }
        
    }                                   

    private void btnAddToCarVMouseReleased(java.awt.event.MouseEvent evt) {                                           
        try {
            // TODO add your handling code here:
            addtocar();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                          
    private boolean descuentoAplicado;
    private void btnDescuentoVMouseReleased(java.awt.event.MouseEvent evt) {                                            
        
        // TODO add your handling code here:
        if (!descuentoAplicado) {
            // Acción para la primera vez que se presiona el botón
            aplicarDescuento();
            descuentoAplicado = true;
        } else {
            // Acción para las siguientes veces que se presiona el botón
            quitarDescuento();
            descuentoAplicado = false;
        }
    }                                           

    private void btnConfirmarVMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        String resi = JOptionPane.showInputDialog(null, "Total recibido:");
        float recibido = Float.parseFloat(resi);
        float devuelta = (float) (recibido - (totalGeneral - descuentoGeneral));
        NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
        String devueltaF = nf.format(devuelta);
        JOptionPane.showMessageDialog(null, "Devuelta, " + devueltaF);
         System.out.println(descuentoGeneral);
        
        confirmVenta(recibido, devuelta);
    }                                           

    private void tblCarritoVKeyReleased(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
        int row = tblCarritoV.getSelectedRow();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            
            DefaultTableModel model = (DefaultTableModel) tblCarritoV.getModel();
            //model.removeRow(row);
            String nombre = tblCarritoV.getValueAt(row, 0).toString();
            System.out.println(nombre);

            // Actualizar la vista del JTable
            //tblCarrito.revalidate();
            DeleteFila(nombre);
        }
    }                                       

    private void btnBackVMouseReleased(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        switch(comingfrom){
            
            case "index":
                panelVender.show(false);
                panelIndex.show(true);
            break;
            case "inventario":
                panelVender.show(false);
                panelInventario.show(true);
                comingfrom = "index";
            break;
            case "ventas":
                panelVender.show(false);
                panelVentas.show(true);
                comingfrom = "index";
            break;
            
        }
    }                                      

    private void btnCancelarFactActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void btnCancelarVMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        Limpiar();
    }                                          

    private void tblArticulosIKeyReleased(java.awt.event.KeyEvent evt) {                                          
        // TODO add your handling code here:
       
    }                                         

    private void tblArticulosIKeyPressed(java.awt.event.KeyEvent evt) {                                         
        // TODO add your handling code here:
         int row = tblArticulosI.getSelectedRow();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ////searchCode(txtProducto.getText(), txtCode.getText());
             
            CellEditor editor = tblArticulosI.getCellEditor();
            if (editor != null) {
                editor.stopCellEditing();
            }
            //updateAD(nombre, adv, desc);
        
            
            DefaultTableModel model = (DefaultTableModel) tblArticulosI.getModel();
            //model.removeRow(row);
            String nombre = tblArticulosI.getValueAt(row, 0).toString();
            ///String precio
            String adv = tblArticulosI.getValueAt(row, 6).toString();
            String desc = tblArticulosI.getValueAt(row, 7).toString();
            
            System.out.println(nombre);

            updateAD(nombre, adv, desc);
        }
    }                                        

    private void btnIrAFacturasMouseReleased(java.awt.event.MouseEvent evt) {                                             
        // TODO add your handling code here:
        goingto = "facturas";
        comingfrom = "index";
        dialogUserInv.setVisible(true);
        
        
    }                                            

    private void itemFactItemStateChanged(java.awt.event.ItemEvent evt) {                                          
        // TODO add your handling code here:
        try {
            reloadTablaFactura();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                         

    private void btnCancelarFactMouseReleased(java.awt.event.MouseEvent evt) {                                              
        // TODO add your handling code here:
        int row = tblFacturas.getSelectedRow();
        
            
        DefaultTableModel model = (DefaultTableModel) tblFacturas.getModel();
         //model.removeRow(row);
        String factura = tblFacturas.getValueAt(row, 0).toString();
        //String  pass = tblUsers.getValueAt(row, 1).toString();
        //String passE = Base64.getEncoder().encodeToString(pass.getBytes());
        
       
        
        
        String canc = JOptionPane.showInputDialog(null, "Escribe 'si' para eliminar:");
        if(canc.equals("si")){
            cancelarFactura(factura);
        }
    }                                             

    private void txtFacturaFKeyReleased(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                // TODO add your handling code here:
                reloadTablaFactura();
            } catch (SQLException ex) {
                Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
    }                                       

    private void btnActualizarMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        loadTablaVentas();
        
    }                                           

    private void btnBackFMouseReleased(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        
        
        switch(comingfrom){
            
            case "index":
                panelFactura.show(false);
                panelIndex.show(true);
            break;
            case "inventario":
                panelFactura.show(false);
                panelInventario.show(true);
            break;
        }
    }                                      

    private void btnBackVentasMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        
        switch(comingfrom){
            
            case "index":
                panelVentas.show(false);
                panelIndex.show(true);
            break;
            case "inventario":
                panelVentas.show(false);
                panelInventario.show(true);
                comingfrom = "index";
            break;
            case "vender":
                panelVentas.show(false);
                panelVender.show(true);
                comingfrom = "index";
            break;
            case "ventas":
                panelVentas.show(false);
                panelIndex.show(true);
            break;
            
        }
    }                                           

    private void txtProductoVentasMouseReleased(java.awt.event.MouseEvent evt) {                                                
        // TODO add your handling code here:
        loadTablaVentas();
    }                                               

    private void txtCodigoVentasMouseReleased(java.awt.event.MouseEvent evt) {                                              
        // TODO add your handling code here:
        loadTablaVentas();
    }                                             

    private void txtClienteVentasMouseReleased(java.awt.event.MouseEvent evt) {                                               
        // TODO add your handling code here:
        loadTablaVentas();
    }                                              

    private void txtFechaDesdeVentasMouseReleased(java.awt.event.MouseEvent evt) {                                                  
        // TODO add your handling code here:
        loadTablaVentas();
    }                                                 

    private void txtFechaHastaVentasMouseReleased(java.awt.event.MouseEvent evt) {                                                  
        // TODO add your handling code here:
        loadTablaVentas();
    }                                                 

    private void btnConfirmBuyMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        completarCompra();
    }                                           

    private void btnAddPMouseReleased(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        addToCarCompra();
    }                                     

    private void dialogPAgotadosWindowOpened(java.awt.event.WindowEvent evt) {                                             
        // TODO add your handling code here:
        mostrarAgotados();
    }                                            

    private void lblPAgotadoMouseReleased(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        dialogPAgotados.setVisible(true);
        mostrarAgotados();
    }                                         

    private void btncancellBuyMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        limpiarComprar();
    }                                           

    private void btnBackAddInvMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        if(!"0".equals(lblTotalAdd.getText())){
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea confirmar la compra antes de salir?");

            if (respuesta == JOptionPane.YES_OPTION) {
                // Si el usuario seleccionó "Sí" en el diálogo de confirmación, haz algo aquí
                completarCompra();
                if(comingfrom == "inventario"){
                    panelAddInventario.show(false);
                    panelInventario.show(true);
                    reloadTablaI();
                }else{
                    panelAddInventario.show(false);
                    panelIndex.show(true);
                    
                }
            
            } else if(respuesta == JOptionPane.NO_OPTION){
                // Si el usuario seleccionó "No" o cerró el diálogo, haz algo diferente aquí
                limpiarComprar();
                
                if(comingfrom == "inventario"){
                    panelAddInventario.show(false);
                    panelInventario.show(true);
                    reloadTablaI();
                }else{
                    panelAddInventario.show(false);
                    panelIndex.show(true);
                    
                }
            }
                    
            
        }else{
            if(comingfrom == "inventario"){
                    panelAddInventario.show(false);
                    panelInventario.show(true);
                }else{
                    panelAddInventario.show(false);
                    panelIndex.show(true);
                    
                }
        }
    }                                           

    private void btnAddInvMouseReleased(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        comingfrom = "inventario";
        panelInventario.show(false);
        panelAddInventario.show(true);
    }                                       

    private void btnAddInvActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void dialogUserInvWindowClosing(java.awt.event.WindowEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void btnEntrarInvMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        String user = txtUserInv.getText();
        String pass = txtPassInv.getText();
        
        Usuario = user;
        
        
        Object[] retorno =  identificacion(user, pass);
        boolean existe = (boolean) retorno[0];
        String priv = (String) retorno[1];
        if(existe){
            if(priv.equals("Administrador")){
            
                //isadmin=false;
           
                
                if(goingto == "inventario"){
                dialogUserInv.setVisible(false);
                
                panelIndex.show(false);
                panelInventario.show(true);
                reloadTablaI();
                
                }
                if(goingto == "contabilidad"){
                    dialogUserInv.setVisible(false);
                    panelIndex.show(false);
                    panelContabilidad.show(true);
                    setFechaContabilidad();
                }
                if(goingto == "addinventario"){
                    dialogUserInv.setVisible(false);
                    panelIndex.show(false);
                    panelAddInventario.show(true);
                }
                if(goingto == "facturas"){
                    dialogUserInv.setVisible(false);
                    panelIndex.show(false);
                    panelFactura.show(true);
                    try {
                        reloadTablaFactura();
                    } catch (SQLException ex) {
                        Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                txtUserInv.setText("");
                txtPassInv.setText("");
                
            }else{
                lblWrongPassInv.setText("No autorizado.");
                
                
            }
        }else{
            lblWrongPassInv.setText("Contraseña incorrecta.");
        }
    }                                          

    private void dialogUserVWindowClosing(java.awt.event.WindowEvent evt) {                                          
        // TODO add your handling code here:
        /*if(venta != null){
            //venta = new Venta();
            //venta.setVisible(false);
            //venta = null;
        }*/
    }                                         

    private void btnEntrarVMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        String user = txtUserV.getText();
        String pass = txtPassV.getText();
        
        Usuario = user;
        
        
        Object[] retorno =  identificacion(user, pass);
        boolean existe = (boolean) retorno[0];
        String priv = (String) retorno[1];
        if(existe){
            if(priv.equals("Vendedor")){
            
                administrador=false;
           
                
               
                dialogUserV.setVisible(false);
                if(comingfrom == "index"){
                    panelIndex.show(false);
                    panelVender.show(true);
                }
                if(comingfrom == "ventas"){
                    panelVentas.show(false);
                    panelVender.show(true);
                
                }
                
                txtUserV.setText("");
                txtPassV.setText("");
                
            }else{
                administrador=true;
              
                
                dialogUserV.setVisible(false);
                
                if(comingfrom == "index"){
                    panelIndex.show(false);
                    panelVender.show(true);
                }
                if(comingfrom == "ventas"){
                    panelVentas.show(false);
                    panelVender.show(true);
                
                }
                
                txtUserV.setText("");
                txtPassV.setText(""); 
                
                
            }
            setFacturaVendedor();
        }else{
            lblWrongPass.setText("Contraseña incorrecta.");
        }

    }                                        

    private void btnVenderIMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        comingfrom = "inventario";
        panelInventario.show(false);
        panelVender.show(true);
        setFacturaVendedor();
    }                                        

    private void btnVenderVentasMouseReleased(java.awt.event.MouseEvent evt) {                                              
        // TODO add your handling code here:
        comingfrom = "ventas";
        dialogUserV.setVisible(true);
    }                                             

    private void btnVentasVMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        comingfrom = "vender";
        panelVender.show(false);
        panelVentas.show(true);
        setFechaVentas();
    }                                        

    private void spCantidadKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:
         // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if(txtProductoV.getText()!= "" && txtCode.getText()!= "" && txtPrecio.getText()!= "" && txtClienteV.getText()!=""){
                if ((int) spCantidad.getValue() > 0) {
                    try {
                        ///searchCode(txtCode.getText());
                        addtocar();
                    } catch (SQLException ex) {
                        Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
         }
    }                                     

    private void txtProductoVKeyReleased(java.awt.event.KeyEvent evt) {                                         
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //searchCode(txtProducto.getText(), txtCode.getText());
            dialogBuscar.setVisible(true);
            txtProBuscar.setText(txtProductoV.getText());
            bus(txtProductoV.getText());
            
        }else{
            txtCode.setText("");
            spCantidad.setValue(0);
            txtPrecio.setText("");
        }
    }                                        

    private void txtProBuscarKeyPressed(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
        bus(txtProBuscar.getText());

    }                                       

    private void txtProBuscarKeyReleased(java.awt.event.KeyEvent evt) {                                         
        // TODO add your handling code here:
        String text = txtProBuscar.getText();
        if (!text.isEmpty()) {
            txtProBuscar.setText(text.substring(0, 1).toUpperCase() + text.substring(1));
        }
    }                                        

    private void tblBuscarMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        int row = tblBuscar.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) tblBuscar.getModel();
        //model.removeRow(row);
        String code = tblBuscar.getValueAt(row, 1).toString();
        BuscarCodigo(code);
        dialogBuscar.setVisible(false);

    }                                      

    private void dialogBuscarWindowActivated(java.awt.event.WindowEvent evt) {                                             
        // TODO add your handling code here:
        txtProBuscar.setText(txtProductoV.getText());
        bus(txtProductoV.getText());
    }                                            

    private void dialogBuscarWindowOpened(java.awt.event.WindowEvent evt) {                                          
        // TODO add your handling code here:
        txtProBuscar.setText(txtProductoV.getText());
        bus(txtProductoV.getText());
    }                                         

    private void btnIdentificacionMouseClicked(java.awt.event.MouseEvent evt) {                                               
        // TODO add your handling code here:
        String user = txtUser.getText();
        String pass =txtPass.getText();
        Usuario = user;
        Object[] retorno =  identificacion(user, pass);
        boolean existe = (boolean) retorno[0];
        String priv = (String) retorno[1];
        if(existe){
            if(priv.equals("Vendedor")){

                txtUser.setText("");
                txtPass.setText("");
                dialogUser.dispose();
                dialogUser.setVisible(false);

                dialogUsers.setVisible(true);

                txtUssChange.setText(Usuario);
            }else{

                dialogUser.setVisible(false);
                txtUser.setText("");
                txtPass.setText("");
                dialogUser.dispose();
                dialogSetUsers.setVisible(true);

            }
        }else{
            lblWrongPass.setText("Contraseña incorrecta.");
        }

    }                                              

    private void dialogUserWindowClosing(java.awt.event.WindowEvent evt) {                                         
        // TODO add your handling code here:
        txtUser.setText("");
        txtPass.setText("");
        dialogUser.dispose();
    }                                        

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        dialogUsers.setVisible(false);
        txtPssChange.setText("");

    }                                      

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {                                     
        try {
            // TODO add your handling code here:
            cambiarContra();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                    

    private void dialogUsersWindowGainedFocus(java.awt.event.WindowEvent evt) {                                              
        // TODO add your handling code here:
        //txtUssChange.setText(uss);
    }                                             

    private void dialogUsersWindowClosing(java.awt.event.WindowEvent evt) {                                          
        // TODO add your handling code here:
        dialogUsers.dispose();
        txtPssChange.setText("");
    }                                         

    private void dialogUsersWindowOpened(java.awt.event.WindowEvent evt) {                                         
        // TODO add your handling code here:
        txtUssChange.setText(Usuario);

    }                                        

    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        ajustarUsuario();
    }                                     

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        reloadTablaUsers();
        dialogSetUsers.setVisible(false);

    }                                     

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        updateUser();
    }                                     

    private void dialogSetUsersWindowOpened(java.awt.event.WindowEvent evt) {                                            
        // TODO add your handling code here:
        reloadTablaUsers();

    }                                           

    private void btnSetUserMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        userSetting();
    }                                        

    private void txtFechaDCKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarGastos();
            calcularProductos();
          
        }
    }                                     

    private void txtFechaHCKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarGastos();
            calcularProductos();
          
        }
    }                                     

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {                                        
        try {
            // TODO add your handling code here:
            addWaste();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                       

    private void btnAddGastosMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        dialogAddGastos.setVisible(true);
    }                                          

    private void btnContabilidadIMouseReleased(java.awt.event.MouseEvent evt) {                                               
        // TODO add your handling code here:
        comingfrom = "inventario"; 
        panelInventario.show(false);
        panelContabilidad.show(true);
        setFechaContabilidad();
    }                                              

    private void btnFacturasMouseReleased(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        comingfrom = "inventario";
        panelInventario.show(false);
        panelFactura.show(true);
        try {
            reloadTablaFactura();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }                                         

    private void btnBackContMouseReleased(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        switch(comingfrom){
        
            case "inventario":
                panelContabilidad.show(false);
                panelInventario.show(true);
            break;
            
            case "index":
                panelContabilidad.show(false);
                panelIndex.show(true);
            break;
        }
    }                                         

    private void txtFecha2CKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        
            mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
        
        }
        
    }                                     

    private void tblComprasRealizadasMouseClicked(java.awt.event.MouseEvent evt) {                                                  
        try {
            // TODO add your handling code here:
            corregirCompra();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                 

    private void tblComprasRealizadasKeyPressed(java.awt.event.KeyEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void txtCPrKeyReleased(java.awt.event.KeyEvent evt) {                                   
        // TODO add your handling code here:
        String text = txtCP.getText();
        if (!text.isEmpty()) {
            txtCP.setText(text.substring(0, 1).toUpperCase() + text.substring(1));
        }
    }                                  

    private void txtCPCActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void btnConCMouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        actualizarCompra();
    }                                    

    private void btnApdateCMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
    }                                       

    private void dialogComprasFocusGained(java.awt.event.FocusEvent evt) {                                          
        // TODO add your handling code here:
        //mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
    }                                         

    private void dialogComprasWindowActivated(java.awt.event.WindowEvent evt) {                                              
        // TODO add your handling code here:
        //mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
    }                                             

    private void dialogComprasWindowOpened(java.awt.event.WindowEvent evt) {                                           
        // TODO add your handling code here:
        mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
    }                                          

    private void btnComprasMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        dialogCompras.setVisible(true);
    }                                        

    private void txtProductoVentasKeyPressed(java.awt.event.KeyEvent evt) {                                             
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             loadTablaVentas();
        }
    }                                            

    private void txtCodigoVentasKeyPressed(java.awt.event.KeyEvent evt) {                                           
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             loadTablaVentas();
        }
    }                                          

    private void txtClienteVentasKeyPressed(java.awt.event.KeyEvent evt) {                                            
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             loadTablaVentas();
        }
    }                                           

    private void txtFechaDesdeVentasKeyPressed(java.awt.event.KeyEvent evt) {                                               
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             loadTablaVentas();
        }
    }                                              

    private void txtFechaHastaVentasKeyPressed(java.awt.event.KeyEvent evt) {                                               
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             loadTablaVentas();
        }
    }                                              

    private void btnImprimirMouseReleased(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        int row = tblVentas.getSelectedRow();
        
            
        DefaultTableModel model = (DefaultTableModel) tblVentas.getModel();
         //model.removeRow(row);
        String factura = tblVentas.getValueAt(row, 6).toString();
        
        String url = "jdbc:mysql://localhost:3306/inventario?";
        String user = "root";
        String password = "";
        
        Connection conn = null;
        try{conn = DriverManager.getConnection(url, user, password);
            String sql = "SELECT * FROM idfacturas WHERE IdFactura = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1,factura);
                

            ResultSet rs = stmt.executeQuery();
                
            if(rs.next()){
                
                String clie = rs.getString("Cliente");
                String vend = rs.getString("Vendedor");
                String fecha = rs.getString("Fecha");
                Time hora = rs.getTime("Hora");
                imprimirV(factura, clie, vend, fecha, hora);
                
            }
        }catch (SQLException e) {
            e.printStackTrace();
        } 
    }                                         

    private void panelProductosAgotandoseMouseReleased(java.awt.event.MouseEvent evt) {                                                       
        // TODO add your handling code here:
        dialogPAgotados.setVisible(true);
        mostrarAgotados();
    }                                                      

    private void btnExitMouseReleased(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
         System.exit(0);
    }                                     

    private void lblPAgotado6MouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        dialogPAgotados.setVisible(true);
        mostrarAgotados();
    }                                          

    private void tblCPKeyPressed(java.awt.event.KeyEvent evt) {                                 
        // TODO add your handling code here:
          int row = tblCP.getSelectedRow();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            
            DefaultTableModel model = (DefaultTableModel) tblCP.getModel();
            //model.removeRow(row);
            String nombre = tblCP.getValueAt(row, 0).toString();
            System.out.println(nombre);

            // Actualizar la vista del JTable
            //tblCarrito.revalidate();
            DeleteFilaCom(nombre);
        }
    }                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAddGastos;
    private javax.swing.JButton btnAddInv;
    private javax.swing.JButton btnAddP;
    private javax.swing.JButton btnAddToCarV;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnApdateC;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBackAddInv;
    private javax.swing.JButton btnBackCont;
    private javax.swing.JButton btnBackF;
    private javax.swing.JButton btnBackV;
    private javax.swing.JButton btnBackVentas;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelarFact;
    private javax.swing.JButton btnCancelarV;
    private javax.swing.JButton btnCompras;
    private javax.swing.JButton btnConC;
    private javax.swing.JButton btnConfirmBuy;
    private javax.swing.JButton btnConfirmarV;
    private javax.swing.JButton btnContabilidadI;
    private javax.swing.JButton btnDescuentoV;
    private javax.swing.JButton btnEntrarInv;
    private javax.swing.JButton btnEntrarV;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFacturas;
    private javax.swing.JButton btnIdentificacion;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnIrAContabilidad;
    private javax.swing.JButton btnIrAFacturas;
    private javax.swing.JButton btnIrAInventario;
    private javax.swing.JButton btnIrAVender;
    private javax.swing.JButton btnIrAVentas;
    private javax.swing.JButton btnIrAddInventario;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSetUser;
    private javax.swing.JButton btnVenderI;
    private javax.swing.JButton btnVenderVentas;
    private javax.swing.JButton btnVentasV;
    private javax.swing.JButton btncancellBuy;
    private javax.swing.JDialog dialogAddGastos;
    private javax.swing.JDialog dialogBuscar;
    private javax.swing.JDialog dialogCompras;
    private javax.swing.JDialog dialogPAgotados;
    private javax.swing.JDialog dialogSetUsers;
    private javax.swing.JDialog dialogUser;
    private javax.swing.JDialog dialogUserInv;
    private javax.swing.JDialog dialogUserV;
    private javax.swing.JDialog dialogUsers;
    private javax.swing.JComboBox<String> itemCPV;
    private javax.swing.JComboBox<String> itemFact;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblDiaMes2;
    private javax.swing.JLabel lblDiaSemana2;
    private javax.swing.JLabel lblFactura2;
    private javax.swing.JLabel lblGananciaEstimada;
    private javax.swing.JLabel lblHora2;
    private javax.swing.JLabel lblMesAnio2;
    private javax.swing.JLabel lblPAgotado;
    private javax.swing.JLabel lblPAgotado1;
    private javax.swing.JLabel lblPAgotado2;
    private javax.swing.JLabel lblPAgotado3;
    private javax.swing.JLabel lblPAgotado4;
    private javax.swing.JLabel lblPAgotado6;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotal1;
    private javax.swing.JLabel lblTotal2;
    private javax.swing.JLabel lblTotalAdd;
    private javax.swing.JLabel lblTotalG;
    private javax.swing.JLabel lblTotalN;
    private javax.swing.JLabel lblTotalProductos;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUser1;
    private javax.swing.JLabel lblUser2;
    private javax.swing.JLabel lblWrongPass;
    private javax.swing.JLabel lblWrongPass1;
    private javax.swing.JLabel lblWrongPassInv;
    private javax.swing.JPanel panelAddInventario;
    private javax.swing.JPanel panelAddP;
    private javax.swing.JPanel panelBAdd;
    private javax.swing.JPanel panelBot;
    private javax.swing.JPanel panelBotonesInventario;
    private javax.swing.JPanel panelBotonesV;
    private javax.swing.JPanel panelBotonesVentas;
    private javax.swing.JPanel panelContabilidad;
    private javax.swing.JPanel panelDescuentoV;
    private javax.swing.JPanel panelFV;
    private javax.swing.JPanel panelFactura;
    private javax.swing.JPanel panelFechaV;
    private javax.swing.JPanel panelFechas;
    private javax.swing.JPanel panelFechasC;
    private javax.swing.JPanel panelFiltrosVentas;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JPanel panelFondoCompras;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelFormu;
    private javax.swing.JPanel panelFormulario2;
    private javax.swing.JPanel panelGastosC;
    private javax.swing.JPanel panelHeaderC;
    private javax.swing.JPanel panelIndex;
    private javax.swing.JPanel panelInventario;
    private javax.swing.JPanel panelProductosAgotandose;
    private javax.swing.JPanel panelProductosAgotandose1;
    private javax.swing.JPanel panelProductosAgotandose2;
    private javax.swing.JPanel panelProductosAgotandose3;
    private javax.swing.JPanel panelProductosAgotandose4;
    private javax.swing.JPanel panelProductosC;
    private javax.swing.JPanel panelRefriV;
    private javax.swing.JPanel panelRefriV1;
    private javax.swing.JPanel panelSubtotalV;
    private javax.swing.JPanel panelSuperiorVentas;
    private javax.swing.JPanel panelTablaBuscar;
    private javax.swing.JPanel panelTablaInventario;
    private javax.swing.JPanel panelTablaVentas;
    private javax.swing.JPanel panelTableV;
    private javax.swing.JPanel panelTitleAgotados;
    private javax.swing.JPanel panelTituloInventario;
    private javax.swing.JPanel panelTituloV;
    private javax.swing.JPanel panelTotalAdd;
    private javax.swing.JPanel panelTotalV;
    private javax.swing.JPanel panelTotalVentas;
    private javax.swing.JPanel panelTotalYGanciasEstimadas;
    private javax.swing.JPanel panelTotales;
    private javax.swing.JPanel panelVender;
    private javax.swing.JPanel panelVentas;
    private javax.swing.JSpinner spCantidad;
    private javax.swing.JTable tblAgotados;
    private javax.swing.JTable tblArticulosI;
    private javax.swing.JTable tblBuscar;
    private javax.swing.JTable tblCP;
    private javax.swing.JTable tblCarritoV;
    private javax.swing.JTable tblComprasRealizadas;
    private javax.swing.JTable tblFacturas;
    private javax.swing.JTable tblGastos;
    private javax.swing.JTable tblProductosC;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTable tblVentas;
    private javax.swing.JTextField txtCC;
    private javax.swing.JTextField txtCId;
    private javax.swing.JTextField txtCP;
    private javax.swing.JTextField txtCPC;
    private javax.swing.JTextField txtCPV;
    private javax.swing.JTextField txtCPr;
    private javax.swing.JTextField txtCU;
    private javax.swing.JTextField txtCV;
    private javax.swing.JTextField txtCan;
    private javax.swing.JTextField txtClienteV;
    private javax.swing.JTextField txtClienteVentas;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtCodigoVentas;
    private javax.swing.JTextField txtFacturaF;
    private javax.swing.JTextField txtFacturaV;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFecha1C;
    private javax.swing.JTextField txtFecha2C;
    private javax.swing.JTextField txtFechaDC;
    private javax.swing.JTextField txtFechaDesdeVentas;
    private javax.swing.JTextField txtFechaHC;
    private javax.swing.JTextField txtFechaHastaVentas;
    private javax.swing.JTextField txtHiddenCan;
    private javax.swing.JTextField txtHiddenPro;
    private javax.swing.JTextField txtPC;
    private javax.swing.JTextField txtPV;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JPasswordField txtPassInv;
    private javax.swing.JPasswordField txtPassV;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtProBuscar;
    private javax.swing.JTextField txtProd;
    private javax.swing.JTextField txtProductoV;
    private javax.swing.JTextField txtProductoVentas;
    private javax.swing.JTextField txtPssChange;
    private javax.swing.JTextField txtUser;
    private javax.swing.JTextField txtUserInv;
    private javax.swing.JTextField txtUserV;
    private javax.swing.JTextField txtUssChange;
    private javax.swing.JTextField txtV;
    private javax.swing.JTextField txtVendedorV;
    private javax.swing.JTextField txtpen;
    private javax.swing.JTextField txtpl;
    private javax.swing.JTextField txtpo;
    private javax.swing.JTextField txtpr;
    private javax.swing.JTextField txtps;
    // End of variables declaration                   

    private void BuscarCodigo(String code){

    Connection conn = ConexionMySQL.obtenerConexion();
        try {
            /*String url = "jdbc:mysql://localhost:3306/inventario?";
            String user = "root";
            String password = "";
            conn = DriverManager.getConnection(url, user, password);
            System.out.println("Conexión establecida.");*/
            String sql;
            PreparedStatement stmt = null;
            
            /*if(prod != "" && prod.length() > 3){
                /*sql ="SELECT * FROM inven WHERE Producto LIKE ?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1, "%"+prod+"%");
                
            }
            else if(code !=  "" && code.length() >= 4){
                sql ="SELECT * FROM inven WHERE Codigo = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1, code);
            }else{
                System.out.println(code+", "+prod);
            }*/
            
            sql ="SELECT * FROM inven WHERE Codigo = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, code);
            
            ResultSet rs = stmt.executeQuery();
            int num_filas = 0;
            if(rs.next()) {
                //num_filas++;
                // hacer algo con los valores recuperados
                System.out.println("Producto encontrado.");
                txtProductoV.setText(rs.getString("Producto"));
                txtCode.setText(rs.getString("Codigo"));
                //spCantidad.set("1");
                
                txtPrecio.setText(rs.getString("Precio"));
                int cantidadCarro = 0;
                PreparedStatement stmtcc = conn.prepareStatement("SELECT * FROM carrito WHERE Producto = ?");
                stmtcc.setString(1, rs.getString("Producto"));
                ResultSet rscc = stmtcc.executeQuery();
                if(rscc.next()){
                    cantidadCarro = rscc.getInt("Cantidad");
                }
                
                int cann = rs.getInt("Cantidad")-cantidadCarro;
                SpinnerNumberModel model = (SpinnerNumberModel) spCantidad.getModel();
                System.out.println("Valor de Cantidad: " + cann);

                // Establecer los límites en el modelo
                if(cann > 0){
                    model.setMinimum(1);

                    model.setMaximum(cann);
                    spCantidad.setValue(1);
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            spCantidad.requestFocus();
                            spCantidad.grabFocus();
                        }
                    });
                    /*JComponent editor = spCantidad.getEditor();
                    if (editor instanceof JSpinner.DefaultEditor) {
                        JTextField textField = ((JSpinner.DefaultEditor) editor).getTextField();

                        // Establecer el foco en el campo de texto
                        textField.requestFocus();
                        textField.selectAll();
                    }*/
                }else{
                    model.setMinimum(0);
                
                    model.setMaximum(0);
                }

                //tranferencia();
            }
            stmt.close();
            rs.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }


    }
    
    private void addtocar() throws SQLException{
    
        if(txtProductoV.getText()!= "" && txtCode.getText()!= "" && txtPrecio.getText()!= "" && txtClienteVentas.getText()!=""){
            if ((int) spCantidad.getValue() > 0) {
                Connection conn = ConexionMySQL.obtenerConexion();
                try{
                    
                    System.out.println("Conexión establecida.");
                    PreparedStatement stmt2 =  conn.prepareStatement("SELECT CompradoA FROM inven WHERE Producto = ?");
                    stmt2.setString(1,txtProductoV.getText());
                    ResultSet rs2 = stmt2.executeQuery();
                    rs2.next();
                    Float precioCompra = rs2.getFloat(1);
                    stmt2.close();
                    rs2.close();
                    
                    PreparedStatement stmt3 =  conn.prepareStatement("SELECT Descuento FROM inven WHERE Producto = ?");
                     stmt3.setString(1,txtProductoV.getText());
                    ResultSet rs3 = stmt3.executeQuery();
                   
                    rs3.next();
                    Float descuento = rs3.getFloat(1);
                    stmt3.close();
                    rs3.close();
                    
                    PreparedStatement statement = conn.prepareStatement("INSERT INTO carrito (Producto, Codigo, Cantidad, PrecioCompra, Precio, Cliente, Descuento) VALUES (?, ?, ?, ?, ?, ?, Descuento)"+ "ON DUPLICATE KEY UPDATE Cantidad = Cantidad+?");
                    statement.setString(1, txtProductoV.getText());
                    statement.setString(2, txtCode.getText());
                    statement.setInt(3, (int) spCantidad.getValue());
                    statement.setFloat(4, precioCompra);
                    statement.setFloat(5, Float.parseFloat(txtPrecio.getText()));
                    statement.setString(6, txtClienteVentas.getText());
                    //statement.setFloat(7, descuento);
                    statement.setInt(7, (int) spCantidad.getValue());
                    
                    
                    int rowsInserted = statement.executeUpdate();
                    
                    statement.close();
                    conn.close();
                    txtProductoV.setText("");
                    txtCode.setText("");
                    spCantidad.setValue(0);
                    txtPrecio.setText("");
                    reloadTablaV();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
            
                JOptionPane.showMessageDialog(null, "No hay "+txtProductoV.getText()+"en existencia", "Alerta", JOptionPane.WARNING_MESSAGE);

            }
        }
    }

    private void reloadTablaV() {
        
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM carrito");
            DefaultTableModel model = (DefaultTableModel) tblCarritoV.getModel();
            model.setRowCount(0);
            float vtotal = 0;
            float vdesc = 0;
            while (rs.next()) {
                int id = rs.getInt("ID");
                String prod = rs.getString("Producto");
                String cod = rs.getString("Codigo");
                int can = rs.getInt("Cantidad");
                //int ven = rs.getInt("Vendidos");
                //float compA = rs.getFloat("CompradoA");
                float pre = rs.getFloat("Precio");
                String cli= rs.getString("Cliente");
                float desc = rs.getFloat("Descuento");
                vdesc += desc * can;
                float subtotal = pre * can;
                vtotal += subtotal/*(pre * can)*/;
                
                
                Object[] fila={prod, cod, can, pre, subtotal};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            totalGeneral = vtotal;
            descuentoGeneral = vdesc;
            NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            String cifraFormateada = nf.format(vtotal);
            lblTotal.setText(cifraFormateada);
            String descuentoF = nf.format(vdesc);
            lblTotal1.setText(descuentoF);
            String tot = nf.format(vtotal-vdesc);
            lblTotal2.setText(tot);
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
    }

    private void aplicarDescuento() {
        
        try (Connection conexion = ConexionMySQL.obtenerConexion()) {
            PreparedStatement stmt2 =  conexion.prepareStatement("UPDATE carrito c JOIN inven i ON c.Producto = i.Producto SET c.Descuento = i.Descuento WHERE c.Producto = i.Producto");
            int filasActualizadas = stmt2.executeUpdate();
            System.out.println("La tabla ha sido actualizada exitosamente. Se actualizaron " + filasActualizadas + " filas.");
            reloadTablaV();
            conexion.close();
        } catch (SQLException ex) {
            System.out.println("Error al actualizar la tabla: " + ex.getMessage());
        }
    }

    private void quitarDescuento() {
       
        try (Connection conexion = ConexionMySQL.obtenerConexion()) {
            PreparedStatement stmt2 =  conexion.prepareStatement("UPDATE carrito c JOIN inven i ON c.Producto = i.Producto SET c.Descuento = 0 WHERE c.Producto = i.Producto");
            int filasActualizadas = stmt2.executeUpdate();
            System.out.println("La tabla ha sido actualizada exitosamente. Se actualizaron " + filasActualizadas + " filas.");
            reloadTablaV();
            conexion.close();
        } catch (SQLException ex) {
            System.out.println("Error al actualizar la tabla: " + ex.getMessage());
        } 
    }

    private void confirmVenta(float recibido, float devuelta){
    
     
        String facturaID;
        int lastId;
        try (Connection conexion = ConexionMySQL.obtenerConexion()) {
            
            Statement stmt2 =  conexion.createStatement();
            ResultSet rs2 = stmt2.executeQuery("SELECT MAX(ID) FROM idfacturas");
            rs2.next();
            lastId = rs2.getInt(1);
            facturaID = String.format("%010d", lastId + 1);
            Date fechaActual = new Date(System.currentTimeMillis());
            
            // Creamos un objeto Time con la hora actual
            Time horaActual = new Time(System.currentTimeMillis());
        
            String consulta = "INSERT INTO ventasp (Producto, Codigo, Cantidad, PrecioCompra, PrecioVenta, Descuento, Cliente, FacturaID, Fecha, Estado) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement statement = conexion.prepareStatement(consulta)) {
                try (Statement statementCarrito = conexion.createStatement()) {
                    
                  
                    ResultSet resultado = statementCarrito.executeQuery("SELECT * FROM carrito");
                    while (resultado.next()) {
                        int ultimoId;
                        statement.setString(1, resultado.getString("Producto"));
                        statement.setString(2, resultado.getString("Codigo"));
                        statement.setInt(3, resultado.getInt("Cantidad"));
                        statement.setDouble(4, resultado.getDouble("PrecioCompra"));
                        statement.setDouble(5, resultado.getDouble("Precio"));
                        statement.setFloat(6, resultado.getFloat("Descuento"));
                        
                        statement.setString(7, txtClienteVentas.getText());
                        statement.setString(8, facturaID);
                        statement.setDate(9, fechaActual);
                        statement.setString(10, "Activas");

                        statement.executeUpdate();
                        
                        PreparedStatement actualizacion = conexion.prepareStatement("UPDATE inven SET Cantidad = Cantidad - ?, Vendidos = Vendidos + ? WHERE Producto = ?");
                        actualizacion.setInt(1, resultado.getInt("Cantidad"));
                        actualizacion.setFloat(2, resultado.getInt("Cantidad"));
                      
                        actualizacion.setString(3, resultado.getString("Producto"));

                        actualizacion.executeUpdate();
                        
                        
                        //printTicket();
                        //imprimirFactura();
                        //ok();
                        reloadTablaV();
                        
                    }
                    
                      String insertID = "INSERT INTO idfacturas (IdFactura, Cliente, Vendedor, Recibido, Devuelta, Fecha, Hora, Estado) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                    
                    try (PreparedStatement stmt3 = conexion.prepareStatement(insertID)) {
                        
                        stmt3.setString(1, facturaID);
                        stmt3.setString(2, txtClienteV.getText());
                        stmt3.setString(3, txtVendedorV.getText());
                        stmt3.setFloat(4, recibido);
                        stmt3.setFloat(5, devuelta);
                        stmt3.setDate(6, fechaActual);
                        stmt3.setTime(7, horaActual);
                        stmt3.setString(8, "Activas");
                        stmt3.executeUpdate();
                    }
                    imprimir(facturaID, txtClienteV.getText(), txtVendedorV.getText());
                    Limpiar();
                    //setFacturaCliente();
                    //txtCliente.setText("");
                    
                }
            }
            
            conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
    private void imprimir(String facturaID, String cliente, String vendedor) throws SQLException {
        
        Date fechaActual = new Date(System.currentTimeMillis());
            
        // Creamos un objeto Time con la hora actual
        Time horaActual = new Time(System.currentTimeMillis());
        
        LocalDateTime fechaHoraActual = LocalDateTime.now();
    
        // Definir el formato deseado
        DateTimeFormatter formatoFechaHora = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Formatear la fecha y hora actual con el formato deseado
        String fechaActual2 = fechaHoraActual.format(formatoFechaHora);

        // Obtener la instancia de PrinterJob
        PrinterJob job = PrinterJob.getPrinterJob();

        // Crear un objeto PageFormat y Paper
        PageFormat format = new PageFormat();
        Paper paper = new Paper();

        // Establecer el tamaño de papel a 80mm de ancho y tamaño variable
        double paperWidth = 3.14961;
        double paperHeight = 1000.0;
        double leftMargin = 0.0;
        double rightMargin = 0.0;
        double topMargin = 0.0;
        double bottomMargin = 0.0;
        paper.setSize(paperWidth * 72.0, paperHeight);
        paper.setImageableArea(leftMargin, topMargin, paperWidth * 72.0 - leftMargin - rightMargin, paperHeight - topMargin - bottomMargin);
        format.setPaper(paper);

        // Crear un Printable que contiene el contenido de la factura
        Printable printable = new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                if (pageIndex != 0) {
                    return NO_SUCH_PAGE;
                }
                int indice =20;
                Graphics2D g2d = (Graphics2D)graphics;
                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
                Font font = new Font("Arial", Font.PLAIN,8);
                
                Font boldFont = font.deriveFont(Font.BOLD);
                g2d.setFont(boldFont);
                // Aquí debes agregar el código para dibujar los elementos de la factura
                g2d.drawString("                        Refricentro El Rubio", 10, indice);indice+=10;
                //g2d.setFont(font);
                g2d.drawString("                    Carretera Cabarete Sosúa # 57 ", 0, indice);indice+=10;

                g2d.drawString("                       Próximo al Casino Cabarete", 0, indice);indice+=10;
                
                g2d.drawString("                 Tel:809-248-1326, Cel:829-379-5465,", 0, indice);indice+=10;
                g2d.drawString("Cliente: "+cliente, 10, indice);indice+=10;
                g2d.drawString("Factura: "+facturaID, 10, indice);indice+=10;
                g2d.drawString("Fecha y hora: "+fechaActual2 + " "+horaActual, 10, indice);indice+=10;
                g2d.drawString("--------------------------------------------------------------------", 0, indice);indice+=10;
                ////g2d.drawString("Producto         Codigo    Cantidad  Precio    Total", 10, indice);indice+=20;
                
                String privilegio = "Vendedor";
                
                Connection conn = null;
                PreparedStatement stmt = null;
                float descuento=0;
                float subtotal =0;
                float recibido=0;
                float devuelta=0;
                try{conn = ConexionMySQL.obtenerConexion();
                String sql = "SELECT * FROM ventasp WHERE FacturaID =?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1,facturaID);
                

                ResultSet rs = stmt.executeQuery();
                
                while(rs.next()){
                
                    ///g2d.drawString(rs.getString("Producto")+"  "+rs.getString("Codigo")+"      "+rs.getInt("Cantidad")+"        "+rs.getFloat("PrecioVenta")+"    "+rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"), 10, indice);indice+=20;
                    String producto = rs.getString("Producto");
                    int maxWidth = 200; // Ancho máximo del papel en píxeles
                    FontMetrics fm = g2d.getFontMetrics(); // Obtenemos las métricas de la fuente actual
                   // Posición Y inicial
                    String[] lines = producto.split("(?<=\\G.{" + (maxWidth/fm.charWidth(' ')) + "})"); // Dividimos el texto en líneas
                    for (String line : lines) {
                        g2d.drawString(line.trim(), 10, indice); // Dibujamos cada línea
                        indice += fm.getHeight(); // Añadimos la altura de la fuente para pasar a la siguiente línea
                    }
                    g2d.drawString("Codigo: "+rs.getString("Codigo"), 10, indice);indice+=10;
                    g2d.drawString("Cantidad: "+String.valueOf(rs.getInt("Cantidad")), 10, indice);indice+=10;
                    g2d.drawString("Precio: "+String.valueOf(rs.getFloat("PrecioVenta")+"             Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"))), 10, indice);indice+=15;
                    //g2d.drawString("                                   Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta")), 10, indice);indice+=10;
                    //g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                    descuento += rs.getFloat("Descuento")*rs.getInt("Cantidad");
                    subtotal += rs.getFloat("PrecioVenta")*rs.getInt("Cantidad");
                }
                if(indice < 150){
                    indice = 150;
                
                }
                g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                   
                 PreparedStatement stmt2 = null;
                String sql2 = "SELECT * FROM idfacturas WHERE IdFactura =?";
                     stmt2 = conn.prepareStatement(sql2);
                    stmt2.setString(1,facturaID);
                

                ResultSet rs2 = stmt2.executeQuery();
                
                if(rs2.next()){
                    recibido = rs2.getFloat("Recibido");
                    devuelta = rs2.getFloat("Devuelta");
                    
                }
                conn.close();
                }catch (SQLException e) {
                    e.printStackTrace();
                } 
                
                //g2d.drawString("Lavadora nedoca  0003      20        20,000    400,000", 10, indice);indice+=20;
                float total = subtotal - descuento;
                g2d.drawString("SubTotal: "+ subtotal, 10, indice);indice+=10;
                g2d.drawString("Descuento: "+ descuento, 10, indice);indice+=10;
                g2d.drawString("Total: "+ total, 10, indice);indice+=10;
               g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
               
                g2d.drawString("Vendedor: "+ vendedor, 10, indice);indice+=10;
                
                
                g2d.drawString("Recibido: "+ recibido, 10, indice);indice+=10;
                g2d.drawString("Devuelta: " + devuelta, 10, indice);indice+=10;
                g2d.drawString("                  Gracias por su compra!", 10, indice);indice+=10;
                indice += 30;
                g2d.drawString("----------------------------------------------------------------------", 10, indice);indice+=10;
                return PAGE_EXISTS;
            }
        };

        // Asignar el Printable al PrinterJob
        job.setPrintable(printable, format);
        
        // Mostrar la ventana de impresión y esperar a que el usuario imprima la factura
        if (job.printDialog()) {
            try {
                job.print();
                imprimir2(facturaID, cliente, vendedor);
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }


        
    }
    
    private void imprimir2(String facturaID, String cliente, String vendedor) {
        
        Date fechaActual = new Date(System.currentTimeMillis());
            
        // Creamos un objeto Time con la hora actual
        Time horaActual = new Time(System.currentTimeMillis());
        
        LocalDateTime fechaHoraActual = LocalDateTime.now();
    
        // Definir el formato deseado
        DateTimeFormatter formatoFechaHora = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Formatear la fecha y hora actual con el formato deseado
        String fechaActual2 = fechaHoraActual.format(formatoFechaHora);

        // Obtener la instancia de PrinterJob
        PrinterJob job = PrinterJob.getPrinterJob();

        // Crear un objeto PageFormat y Paper
        PageFormat format = new PageFormat();
        Paper paper = new Paper();

        // Establecer el tamaño de papel a 80mm de ancho y tamaño variable
        double paperWidth = 3.14961;
        double paperHeight = 1000.0;
        double leftMargin = 0.0;
        double rightMargin = 0.0;
        double topMargin = 0.0;
        double bottomMargin = 0.0;
        paper.setSize(paperWidth * 72.0, paperHeight);
        paper.setImageableArea(leftMargin, topMargin, paperWidth * 72.0 - leftMargin - rightMargin, paperHeight - topMargin - bottomMargin);
        format.setPaper(paper);

        // Crear un Printable que contiene el contenido de la factura
        Printable printable = new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                if (pageIndex != 0) {
                    return NO_SUCH_PAGE;
                }
                int indice =20;
                Graphics2D g2d = (Graphics2D)graphics;
                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
                Font font = new Font("Arial", Font.PLAIN,8);
                
                Font boldFont = font.deriveFont(Font.BOLD);
                g2d.setFont(boldFont);
                // Aquí debes agregar el código para dibujar los elementos de la factura
                g2d.drawString("                        Refricentro El Rubio", 10, indice);indice+=10;
                //g2d.setFont(font);
                g2d.drawString("                    Carretera Cabarete Sosúa # 57 ", 0, indice);indice+=10;

                g2d.drawString("                       Próximo al Casino Cabarete", 0, indice);indice+=10;
                
                g2d.drawString("                 Tel:809-248-1326, Cel:829-379-5465,", 0, indice);indice+=10;
                g2d.drawString("Cliente: "+cliente, 10, indice);indice+=10;
                g2d.drawString("Factura: "+facturaID, 10, indice);indice+=10;
                g2d.drawString("Fecha y hora: "+fechaActual2 + " "+horaActual, 10, indice);indice+=10;
                g2d.drawString("COPIA", 10, indice);indice+=10;
                g2d.drawString("--------------------------------------------------------------------", 0, indice);indice+=10;
                ////g2d.drawString("Producto         Codigo    Cantidad  Precio    Total", 10, indice);indice+=20;
                
                String privilegio = "Vendedor";
            
                Connection conn = null;
                PreparedStatement stmt = null;
                float descuento=0;
                float subtotal =0;
                float recibido=0;
                float devuelta=0;
                try{conn = ConexionMySQL.obtenerConexion();
                String sql = "SELECT * FROM ventasp WHERE FacturaID =?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1,facturaID);
                

                ResultSet rs = stmt.executeQuery();
                
                while(rs.next()){
                
                    ///g2d.drawString(rs.getString("Producto")+"  "+rs.getString("Codigo")+"      "+rs.getInt("Cantidad")+"        "+rs.getFloat("PrecioVenta")+"    "+rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"), 10, indice);indice+=20;
                    String producto = rs.getString("Producto");
                    int maxWidth = 200; // Ancho máximo del papel en píxeles
                    FontMetrics fm = g2d.getFontMetrics(); // Obtenemos las métricas de la fuente actual
                   // Posición Y inicial
                    String[] lines = producto.split("(?<=\\G.{" + (maxWidth/fm.charWidth(' ')) + "})"); // Dividimos el texto en líneas
                    for (String line : lines) {
                        g2d.drawString(line.trim(), 10, indice); // Dibujamos cada línea
                        indice += fm.getHeight(); // Añadimos la altura de la fuente para pasar a la siguiente línea
                    }
                    g2d.drawString("Codigo: "+rs.getString("Codigo"), 10, indice);indice+=10;
                    g2d.drawString("Cantidad: "+String.valueOf(rs.getInt("Cantidad")), 10, indice);indice+=10;
                    g2d.drawString("Precio: "+String.valueOf(rs.getFloat("PrecioVenta")+"             Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"))), 10, indice);indice+=15;
                    //g2d.drawString("                                   Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta")), 10, indice);indice+=10;
                    //g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                    descuento += rs.getFloat("Descuento")*rs.getInt("Cantidad");
                    subtotal += rs.getFloat("PrecioVenta")*rs.getInt("Cantidad");
                }
                if(indice < 150){
                    indice = 150;
                
                }
                g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                   
                 PreparedStatement stmt2 = null;
                String sql2 = "SELECT * FROM idfacturas WHERE IdFactura =?";
                     stmt2 = conn.prepareStatement(sql2);
                    stmt2.setString(1,facturaID);
                

                ResultSet rs2 = stmt2.executeQuery();
                
                if(rs2.next()){
                    recibido = rs2.getFloat("Recibido");
                    devuelta = rs2.getFloat("Devuelta");
                    
                }
                conn.close();
                }catch (SQLException e) {
                    e.printStackTrace();
                } 
                
                //g2d.drawString("Lavadora nedoca  0003      20        20,000    400,000", 10, indice);indice+=20;
                float total = subtotal - descuento;
                g2d.drawString("SubTotal: "+ subtotal, 10, indice);indice+=10;
                g2d.drawString("Descuento: "+ descuento, 10, indice);indice+=10;
                g2d.drawString("Total: "+ total, 10, indice);indice+=10;
               g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
               
                g2d.drawString("Vendedor: "+ vendedor, 10, indice);indice+=10;
                
                
                g2d.drawString("Recibido: "+ recibido, 10, indice);indice+=10;
                g2d.drawString("Devuelta: " + devuelta, 10, indice);indice+=10;
                g2d.drawString("                  Gracias por su compra!", 10, indice);indice+=10;
                indice += 30;
                g2d.drawString("----------------------------------------------------------------------", 10, indice);indice+=10;
                return PAGE_EXISTS;
            }
        };

        // Asignar el Printable al PrinterJob
        job.setPrintable(printable, format);
        
        // Mostrar la ventana de impresión y esperar a que el usuario imprima la factura
        if (job.printDialog()) {
            try {
                job.print();
                ///imprimir2(facturaID, cliente, vendedor);
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }
    
    
    }

    private void imprimirV(String facturaID, String cliente, String vendedor, String fecha, Time hora) throws SQLException {
        
        //Date fechaActual = new Date(System.currentTimeMillis());
        //Date fechaActual = fecha;  
        
        String[] fechaArrayh = fecha.split("-");
        String fv = fechaArrayh[2]+"/"+fechaArrayh[1]+"/"+fechaArrayh[0];
        // Creamos un objeto Time con la hora actual
        //Time horaActual = new Time(System.currentTimeMillis());
        Time horaActual = hora;
        //Date fechaHoraActual = fechaActual;
    
        // Definir el formato deseado
        DateTimeFormatter formatoFechaHora = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Formatear la fecha y hora actual con el formato deseado
        //Date fechaActual2 = fechaHoraActual.format(formatoFechaHora);

        // Obtener la instancia de PrinterJob
        PrinterJob job = PrinterJob.getPrinterJob();

        // Crear un objeto PageFormat y Paper
        PageFormat format = new PageFormat();
        Paper paper = new Paper();

        // Establecer el tamaño de papel a 80mm de ancho y tamaño variable
        double paperWidth = 3.14961;
        double paperHeight = 1000.0;
        double leftMargin = 0.0;
        double rightMargin = 0.0;
        double topMargin = 0.0;
        double bottomMargin = 0.0;
        paper.setSize(paperWidth * 72.0, paperHeight);
        paper.setImageableArea(leftMargin, topMargin, paperWidth * 72.0 - leftMargin - rightMargin, paperHeight - topMargin - bottomMargin);
        format.setPaper(paper);

        // Crear un Printable que contiene el contenido de la factura
        Printable printable = new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                if (pageIndex != 0) {
                    return NO_SUCH_PAGE;
                }
                int indice =20;
                Graphics2D g2d = (Graphics2D)graphics;
                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
                Font font = new Font("Arial", Font.PLAIN,8);
                
                Font boldFont = font.deriveFont(Font.BOLD);
                g2d.setFont(boldFont);
                // Aquí debes agregar el código para dibujar los elementos de la factura
                g2d.drawString("                        Refricentro El Rubio", 10, indice);indice+=10;
                //g2d.setFont(font);
                g2d.drawString("                    Carretera Cabarete Sosúa # 57 ", 0, indice);indice+=10;

                g2d.drawString("                       Próximo al Casino Cabarete", 0, indice);indice+=10;
                
                g2d.drawString("                 Tel:809-248-1326, Cel:829-379-5465", 0, indice);indice+=10;
                g2d.drawString("Cliente: "+cliente, 10, indice);indice+=10;
                g2d.drawString("Factura: "+facturaID, 10, indice);indice+=10;
                g2d.drawString("Fecha y hora: "+fv + " "+horaActual, 10, indice);indice+=10;
                g2d.drawString("COPIA ", 10, indice);indice+=10;
                g2d.drawString("--------------------------------------------------------------------", 0, indice);indice+=10;
                ////g2d.drawString("Producto         Codigo    Cantidad  Precio    Total", 10, indice);indice+=20;
                
                String privilegio = "Vendedor";
              
                Connection conn = null;
                PreparedStatement stmt = null;
                float descuento=0;
                float subtotal =0;
                float recibido=0;
                float devuelta=0;
                try{conn = ConexionMySQL.obtenerConexion();
                String sql = "SELECT * FROM ventasp WHERE FacturaID =?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1,facturaID);
                

                ResultSet rs = stmt.executeQuery();
                
                while(rs.next()){
                
                    ///g2d.drawString(rs.getString("Producto")+"  "+rs.getString("Codigo")+"      "+rs.getInt("Cantidad")+"        "+rs.getFloat("PrecioVenta")+"    "+rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"), 10, indice);indice+=20;
                    String producto = rs.getString("Producto");
                    int maxWidth = 200; // Ancho máximo del papel en píxeles
                    FontMetrics fm = g2d.getFontMetrics(); // Obtenemos las métricas de la fuente actual
                   // Posición Y inicial
                    String[] lines = producto.split("(?<=\\G.{" + (maxWidth/fm.charWidth(' ')) + "})"); // Dividimos el texto en líneas
                    for (String line : lines) {
                        g2d.drawString(line.trim(), 10, indice); // Dibujamos cada línea
                        indice += fm.getHeight(); // Añadimos la altura de la fuente para pasar a la siguiente línea
                    }
                    g2d.drawString("Codigo: "+rs.getString("Codigo"), 10, indice);indice+=10;
                    g2d.drawString("Cantidad: "+String.valueOf(rs.getInt("Cantidad")), 10, indice);indice+=10;
                    g2d.drawString("Precio: "+String.valueOf(rs.getFloat("PrecioVenta")+"             Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta"))), 10, indice);indice+=15;
                    //g2d.drawString("                                   Total: "+String.valueOf(rs.getInt("Cantidad")*rs.getFloat("PrecioVenta")), 10, indice);indice+=10;
                    //g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                    descuento += rs.getFloat("Descuento")*rs.getInt("Cantidad");
                    subtotal += rs.getFloat("PrecioVenta")*rs.getInt("Cantidad");
                }
                if(indice < 150){
                    indice = 150;
                
                }
                g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
                   
                 PreparedStatement stmt2 = null;
                String sql2 = "SELECT * FROM idfacturas WHERE IdFactura =?";
                     stmt2 = conn.prepareStatement(sql2);
                    stmt2.setString(1,facturaID);
                

                ResultSet rs2 = stmt2.executeQuery();
                
                if(rs2.next()){
                    recibido = rs2.getFloat("Recibido");
                    devuelta = rs2.getFloat("Devuelta");
                    
                }
                conn.close();
                }catch (SQLException e) {
                    e.printStackTrace();
                } 
                
                //g2d.drawString("Lavadora nedoca  0003      20        20,000    400,000", 10, indice);indice+=20;
                float total = subtotal - descuento;
                g2d.drawString("SubTotal: "+ subtotal, 10, indice);indice+=10;
                g2d.drawString("Descuento: "+ descuento, 10, indice);indice+=10;
                g2d.drawString("Total: "+ total, 10, indice);indice+=10;
               g2d.drawString("------------------------------------------------------------------------", 0, indice);indice+=10;
               
                g2d.drawString("Vendedor: "+ vendedor, 10, indice);indice+=10;
                
                
                g2d.drawString("Recibido: "+ recibido, 10, indice);indice+=10;
                g2d.drawString("Devuelta: " + devuelta, 10, indice);indice+=10;
                g2d.drawString("                  Gracias por su compra!", 10, indice);indice+=10;
                indice += 30;
                g2d.drawString("----------------------------------------------------------------------", 10, indice);indice+=10;
                return PAGE_EXISTS;
            }
        };

        // Asignar el Printable al PrinterJob
        job.setPrintable(printable, format);

        // Mostrar la ventana de impresión y esperar a que el usuario imprima la factura
        if (job.printDialog()) {
            try {
                job.print();
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }


        
    }
    private void Limpiar() {
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();

            // Preparar la sentencia SQL DELETE
            String sql = "DELETE FROM carrito";
            stmt = conn.prepareStatement(sql);

            // Establecer el valor del parámetro en el número de fila eliminado
            //stmt.setString(1, );

            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            txtClienteV.setText("");
            reloadTablaV();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }

    private void DeleteFila(String row) {
        
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();
            
            // Preparar la sentencia SQL DELETE
            String sql = "DELETE FROM carrito WHERE Producto = ?";
            stmt = conn.prepareStatement(sql);
            // Establecer el valor del parámetro en el número de fila eliminado
            stmt.setString(1, row);
            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            
            reloadTablaV();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } 

    }
    
     private void reloadTablaI(){
        
        int agotandose = 0;
        
        
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM inven");
            DefaultTableModel model = (DefaultTableModel) tblArticulosI.getModel();
            model.setRowCount(0);
            int totalproductos = 0;
            float totalventasp = 0;
            while (rs.next()) {
                int id = rs.getInt("ID");
                String prod = rs.getString("Producto");
                String cod = rs.getString("Codigo");
                int can = rs.getInt("Cantidad");
                int ven = rs.getInt("Vendidos");
                float compA = rs.getFloat("CompradoA");
                float pre = rs.getFloat("Precio");
                int adv = rs.getInt("Advertencia");
                int desc = rs.getInt("Descuento");
                totalproductos += can;
                float provpre = pre * can;
                totalventasp += provpre;
                
                Object[] fila={prod, cod, can, ven, compA, pre, adv, desc};
                model.addRow(fila);
                // hacer algo con los valores recuperados
                
                //txtProducto.setText("");
                //txtCantidad.setText("");
                //txtCompradoA.setText("");
                //txtPrecioVenta.setText("");
                //txtMinimo.setText("");
                if(can <= adv){
                    agotandose += 1;
                }
                
           }
            DecimalFormat formato = new DecimalFormat("#,###");

            
            lblTotalProductos.setText(formato.format(totalproductos));
            lblGananciaEstimada.setText(formato.format(totalventasp));
            lblPAgotado.setText("Productos agotandose ("+agotandose+")");
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
      

    }

    private void updateAD(String pro, String adv, String desc){
        
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();

            // Preparar la sentencia SQL DELETE
            String sql = "UPDATE inven SET Advertencia = ?, Descuento = ? WHERE Producto = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(adv));
            stmt.setFloat(2, Float.parseFloat(desc));
            stmt.setString(3, pro);
            
            // Establecer el valor del parámetro en el número de fila eliminado
            //stmt.setString(1, );
            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            conn.close();
            reloadTablaI();
            
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    
    }
    
    private void reloadTablaFactura() throws SQLException{
        
        
        String item = "";
        if(itemFact.getSelectedItem().equals("Activas") || itemFact.getSelectedItem().equals("Canceladas")){
            
            
        }
        try {Connection conn = ConexionMySQL.obtenerConexion();
            PreparedStatement stmt = null;
            if(txtFacturaF.getText().isEmpty()){
               if(itemFact.getSelectedItem().equals("Activas") || itemFact.getSelectedItem().equals("Canceladas")){
                    item = (String) itemFact.getSelectedItem();
                    stmt = conn.prepareStatement("SELECT * FROM idfacturas WHERE Estado = ?"); 
                    stmt.setString(1, item);
               }else{
                    stmt = conn.prepareStatement("SELECT * FROM idfacturas"); 
                    
               }
            }else{
                if(itemFact.getSelectedItem().equals("Activas") || itemFact.getSelectedItem().equals("Canceladas")){
                    stmt = conn.prepareStatement("SELECT * FROM idfacturas WHERE IdFactura = ? AND Estado = ?"); 
                    stmt.setString(1,txtFacturaF.getText());
                    stmt.setString(2,item);
                }else{
                    stmt = conn.prepareStatement("SELECT * FROM idfacturas WHERE IdFactura = ?"); 
                    stmt.setString(1,txtFacturaF.getText());
                }
            }
            ResultSet rs = stmt.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblFacturas.getModel();
            model.setRowCount(0);
            //double vtotal = 0;
            
            while (rs.next()) {
                int id = rs.getInt("ID");
                String fact = rs.getString("idFactura");
                String cli = rs.getString("Cliente");
                String vend = rs.getString("Vendedor");
                float recib = rs.getFloat("Recibido");
                float dev = rs.getFloat("Devuelta");
                
                String fech2 = rs.getString("Fecha");
                String hor = rs.getString("Hora");
                String estado = rs.getString("Estado");
                
                ////double subtotal = pre * can;
                ////vtotal += subtotal/*(pre * can)*/;
                String[] fechaArray1 = fech2.split("-");
                String fech = fechaArray1[2]+"/"+fechaArray1[1]+"/"+fechaArray1[0];
                 PreparedStatement stmt22 = null;
                 stmt22 = conn.prepareStatement("SELECT * FROM ventasp WHERE FacturaID = ?");

                    stmt22.setString(1, fact);
                    ResultSet rs22 = stmt22.executeQuery();


                 
                    float vtotal = 0;

                    if (rs22.next()) {
                        
                        float pv = rs22.getFloat("PrecioVenta");
                        int can = rs22.getInt("Cantidad");
                        float desc = rs22.getFloat("Descuento");

                        vtotal = pv * can;
                        vtotal -= desc;
                        // hacer algo con los valores recuperados
                   }
                
                
                
                
                Object[] fila={fact, cli, vend, recib, dev, fech+" "+hor, vtotal, estado};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            ///String cifraFormateada = nf.format(vtotal);
            ////lblTotal.setText(cifraFormateada);
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void cancelarFactura(String factura) {
        
        Connection conn = null;
        PreparedStatement stmtV = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();

            // Preparar la sentencia SQL DELETE
            
            String consulta = "UPDATE inven i " +
                              "INNER JOIN ventasp v ON i.Producto = v.Producto " +
                              "SET i.Cantidad = i.Cantidad + v.Cantidad, " +
                                  "i.Vendidos = i.Vendidos - v.Cantidad, " +
                                  "v.Estado = 'Canceladas' " +
                              "WHERE v.FacturaID = ?";
            
            PreparedStatement ps = conn.prepareStatement(consulta);
            ps.setString(1, factura);
            int filasActualizadas = ps.executeUpdate();
            
            PreparedStatement ps2 = conn.prepareStatement("UPDATE idfacturas SET Estado = ? WHERE IdFactura = ?");
            ps2.setString(1, "Canceladas");
            ps2.setString(2, factura);
            int filasActualizadas2 = ps2.executeUpdate();
            conn.close();
            reloadTablaFactura();
            
            
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        
        
    }
    
    
    private void loadTablaVentas(){
        
        
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            String consu = "SELECT * FROM ventasp WHERE 1 = 1 AND Estado = 'Activas'";
            //ResultSet rs = stmt.executeQuery("SELECT * FROM ventasp");
            java.sql.Date fechaDD = null;
            java.sql.Date fechaHH = null;
            if(!txtFechaDesdeVentas.getText().isEmpty() && !txtFechaHastaVentas.getText().isEmpty()){
                String[] fechaArrayd = txtFechaDesdeVentas.getText().split("/");
                String fd = fechaArrayd[2]+"/"+fechaArrayd[1]+"/"+fechaArrayd[0];
                
                String[] fechaArrayh = txtFechaHastaVentas.getText().split("/");
                String fh = fechaArrayh[2]+"/"+fechaArrayh[1]+"/"+fechaArrayh[0];
                
                LocalDate fechad = LocalDate.parse(fd, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
                LocalDate fechah = LocalDate.parse(fh, DateTimeFormatter.ofPattern("yyyy/MM/dd"));

                // Crear un objeto java.sql.Date a partir de LocalDate
                fechaDD = java.sql.Date.valueOf(fechad);
                fechaHH = java.sql.Date.valueOf(fechah);
            }
            
             String filtros [] = null;
            
            // Comprobamos los TextField y agregamos los filtros correspondientes
            int arrn= 0;
            if (!txtProductoVentas.getText().isEmpty()) {
                consu += " AND Producto LIKE ?";
                //arrn++;
            }
            if (!txtCodigoVentas.getText().isEmpty()) {
                consu += " AND Codigo = ?";
               
            }
            if (!txtClienteVentas.getText().isEmpty()) {
                consu += " AND Cliente = ?";
              
            }
           
            if(!txtFechaDesdeVentas.getText().isEmpty() && !txtFechaHastaVentas.getText().isEmpty()){
                consu += " AND Fecha BETWEEN ? AND ?";
            }
            
            /*/ Si hay filtros, agregamos la cláusula WHERE a la consulta
            if (filtros != null) {
                consu += " WHERE " + String.join(" AND ", filtros);
            }*/
            PreparedStatement statement = conn.prepareStatement(consu);
            /**/
            // Seteamos los valores de los parámetros, si corresponde
            int indice = 1;
            if (!txtProductoVentas.getText().isEmpty()) {
                statement.setString(indice++, "%"+txtProductoVentas.getText()+"%");
            }
            if (!txtCodigoVentas.getText().isEmpty()) {
                statement.setString(indice++, txtCodigoVentas.getText());
            }
            if (!txtClienteVentas.getText().isEmpty()) {
                statement.setString(indice++, txtClienteVentas.getText());
            }
            if(!txtFechaDesdeVentas.getText().isEmpty() && !txtFechaHastaVentas.getText().isEmpty()){
                
               
                statement.setDate(indice++, fechaDD);
               
                statement.setDate(indice++, fechaHH);
            }
            
            // Ejecutamos la consulta
            ResultSet rs = statement.executeQuery();
            
            
            DefaultTableModel model = (DefaultTableModel) tblVentas.getModel();
            model.setRowCount(0);
            double vtotal = 0;
            double totall = 0;
            float totaldesc = 0;
            while (rs.next()) {
                int id = rs.getInt("ID");
                String prod = rs.getString("Producto");
                String cod = rs.getString("Codigo");
                int can = rs.getInt("Cantidad");
                //int ven = rs.getInt("Vendidos");
                //float compA = rs.getFloat("CompradoA");
                float pre = rs.getFloat("PrecioVenta");
                float desc = rs.getFloat("Descuento");
                String cli= rs.getString("Cliente");
                double subtotal = pre * can;
                String facturaID = rs.getString("facturaID");
                vtotal += subtotal/*(pre * can)*/;
                float totaldesc2 = desc * can;
                totaldesc += totaldesc2;
                ///Statement stmtd = conn.createStatement(); 
                ///ResultSet rsdate = (ResultSet) conn.prepareStatement("SELECT * FROM idfacturas WHERE FacturaID = ?");
                PreparedStatement stmtd = conn.prepareStatement("SELECT * FROM idfacturas WHERE IdFactura = ?");
                stmtd.setString(1, facturaID);
                ResultSet rsdate = stmtd.executeQuery();
                rsdate.next();
                String fecha = rsdate.getString("Fecha");
                String hora=rsdate.getString("Hora");
                String vendedor = rsdate.getString("Vendedor");
                String[] fechaArray21 = fecha.split("-");
                String fecha2 = fechaArray21[2]+"/"+fechaArray21[1]+"/"+fechaArray21[0];
                
                Object[] fila={prod, cod, can, pre, subtotal, totaldesc2, facturaID, cli, vendedor, fecha2+" "+ hora};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            String cifraFormateada = nf.format((float) vtotal-totaldesc);
            lblTotalN.setText(cifraFormateada);
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void completarCompra() {
      
     
    
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM carrocompra");
            //DefaultTableModel model = (DefaultTableModel) tblArticulos.getModel();
            ///model.setRowCount(0);
            while (rs.next()) {
                //int id = rs.getInt("ID");
                String prod = rs.getString("Producto");
               
                int can = rs.getInt("Cantidad");
                float pc = rs.getInt("PrecioCompra");
                float pv = rs.getFloat("PrecioVenta");
                String v = rs.getString("Vendedor");
                
                
                insercion(prod, can, pc, pv, 0, v);
                //model.addRow(fila);
                // hacer algo con los valores recuperados
                
                /*txtPro.setText("");
                txtCantidad.setText("");
                txtCompradoA.setText("");
                txtPrecioVenta.setText("");
                txtMinimo.setText("");?*/
           }
            conn.close();
            
            limpiarComprar();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void insercion(String prod, int Can, float compA, float prec, int adv, String v) throws SQLException {
        String codigo = "";
        Connection conn = null;
        try {
           
            conn = ConexionMySQL.obtenerConexion();
            System.out.println("Conexión establecida.");

            // Crear un nuevo PreparedStatement para la inserción o actualización
            PreparedStatement statement = conn.prepareStatement("INSERT INTO inven (Producto, Codigo, Cantidad, CompradoA, Precio, Advertencia, Descuento) VALUES (?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE Cantidad = Cantidad + ?, Precio = ?, CompradoA = ?");
            statement.setString(1, prod);

            // Consultar el último ID de la tabla
            try (Statement stmt2 = conn.createStatement()) {
                ResultSet rs2 = stmt2.executeQuery("SELECT COALESCE(MAX(ID), 0) AS LastId FROM inven");
                if (rs2.next()) {
                    int lastId = rs2.getInt("LastId");
                    codigo = String.format("%04d", lastId + 1);
                } else {
                    codigo = "0001";
                }
                rs2.close();
            }

            statement.setString(2, codigo);
            statement.setInt(3, Can);
            statement.setFloat(4, compA);
            statement.setFloat(5, prec);
            statement.setInt(6, adv);
            statement.setInt(7, 0);
            statement.setInt(8, Can);
            statement.setFloat(9, prec);
            statement.setFloat(10, compA);

            int rowsAffected = statement.executeUpdate();
            statement.close();

            if (rowsAffected > 0) {
                System.out.println("Producto insertado o actualizado exitosamente");
                addComprasP(prod, Can, compA, prec, v);
                reloadTablaComprar();
            } else {
                System.out.println("No se realizaron cambios en el producto");
            }
            conn.close();
            
        } catch (SQLException e) {
            System.out.println("Error al establecer la conexión: " + e.getMessage());
        }
    }

    private void addComprasP(String prod, int can, float Pc, float Pv, String v) {
        
        Connection conn = null;
        Date fechaActual = new Date(System.currentTimeMillis());    
        try{
                
                conn = ConexionMySQL.obtenerConexion();
                System.out.println("Conexión establecida.");
                /*Statement stmt2 =  conn.createStatement();
                
                ResultSet rs2 = stmt2.executeQuery("SELECT CompradoA FROM inven");
                rs2.next();
                Float precioCompra = rs2.getFloat(1);
                stmt2.close();
                rs2.close();
                */
                PreparedStatement statement = conn.prepareStatement("INSERT INTO comprasp (Producto, Cantidad, PrecioCompra, PrecioVenta, Vendedor, Fecha) VALUES (?, ?, ?, ?, ?, ?)");
                statement.setString(1, prod);
                statement.setInt(2, can);
                statement.setFloat(3, Pc);
                statement.setFloat(4, Pv);
                statement.setString(5,v);
                statement.setDate(6, fechaActual);
                

                int rowsInserted = statement.executeUpdate();

                statement.close();
                conn.close();
           
            } catch (SQLException e) {
                e.printStackTrace();
            }

    }

    private void reloadTablaComprar() {
       
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM carrocompra");
            DefaultTableModel model = (DefaultTableModel) tblCP.getModel();
            model.setRowCount(0);
            float total = 0;
            while (rs.next()) {
                int id = rs.getInt("ID");
                String prod = rs.getString("Producto");
                
                int can = rs.getInt("Cantidad");
                
                float pc = rs.getFloat("PrecioCompra");
                float pv = rs.getFloat("PrecioVenta");
                String v = rs.getString("Vendedor");
                
                total += (pc * can);
                
                Object[] fila={prod, can, pc, pv, v};
                model.addRow(fila);
                // hacer algo con los valores recuperados
                
                txtProd.setText("");
                txtCan.setText("");
                txtPC.setText("");
                txtPV.setText("");
                txtV.setText("");
           }
            NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            String cifraFormateada = nf.format(total);
            lblTotalAdd.setText(cifraFormateada);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void limpiarComprar() {
        
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();

            // Preparar la sentencia SQL DELETE
            String sql = "DELETE FROM carrocompra";
            stmt = conn.prepareStatement(sql);

            // Establecer el valor del parámetro en el número de fila eliminado
            //stmt.setString(1, );
            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            
            reloadTablaComprar();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }

    private void addToCarCompra() {
        
        if(txtProd.getText()!= "" && txtCan.getText()!= "" && txtPC.getText()!= "" && txtPC.getText()!= "" && txtV.getText()!= ""){
            Connection conn = null;
            try{
                
                conn = ConexionMySQL.obtenerConexion();
                System.out.println("Conexión establecida.");
                /*Statement stmt2 =  conn.createStatement();
                
                ResultSet rs2 = stmt2.executeQuery("SELECT CompradoA FROM inven");
                rs2.next();
                Float precioCompra = rs2.getFloat(1);
                stmt2.close();
                rs2.close();
                */
                PreparedStatement statement = conn.prepareStatement("INSERT INTO carrocompra (Producto, Cantidad, PrecioCompra, PrecioVenta, Vendedor) VALUES (?, ?, ?, ?, ?)"+ "ON DUPLICATE KEY UPDATE Cantidad = Cantidad+?");
                statement.setString(1, txtProd.getText());
                statement.setInt(2, Integer.parseInt(txtCan.getText()));
                statement.setFloat(3, Float.parseFloat(txtPC.getText()));
                statement.setFloat(4, Float.parseFloat(txtPV.getText()));
                statement.setString(5,txtV.getText());
                statement.setInt(6, Integer.parseInt(txtCan.getText()));
                

                int rowsInserted = statement.executeUpdate();

                statement.close();
                conn.close();
                txtProd.setText("");
                txtCan.setText("");
                //txtCantidad.setText("");
                txtPC.setText("");
                txtPV.setText("");
                txtV.setText("");
                reloadTablaComprar();
                
            
            } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void mostrarAgotados() {
       
        try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM inven WHERE Cantidad <= Advertencia");
            DefaultTableModel model = (DefaultTableModel) tblAgotados.getModel();
            model.setRowCount(0);
            double vtotal = 0;
            
            while (rs.next()) {
                String pro = rs.getString("Producto");
                String cod = rs.getString("Codigo");
                int can = rs.getInt("Cantidad");
                
                
                Object[] fila={pro, cod, can};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            /*NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            String cifraFormateada = nf.format(vtotal);
            lblTotal.setText(cifraFormateada);*/
          conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private Object[] identificacion(String us, String pas) {
        
        boolean existe = false;
        String privilegio = "Vendedor";
        String url = "jdbc:mysql://localhost:3306/inventario?";
        String user = "root";
        String password = "";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = DriverManager.getConnection(url, user, password);

            // Preparar la sentencia SQL DELETE
            String sql = "SELECT * FROM users WHERE User = ? AND Password = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1,us);
            stmt.setString(2,pas);
            
            ResultSet rs = stmt.executeQuery();
            if(rs.next()){
                existe = true;
                privilegio = rs.getString("Privilegio");
            }
            
            // Establecer el valor del parámetro en el número de fila eliminado
            //stmt.setString(1, );

            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            
            
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        Object[] retorno = {existe, privilegio};
        return retorno;
    }

    private void setFacturaVendedor() {
    
        
        String facturaID;
        int lastId;
        try (Connection conexion = ConexionMySQL.obtenerConexion()) {
            
            Statement stmt2 =  conexion.createStatement();
            ResultSet rs2 = stmt2.executeQuery("SELECT MAX(ID) FROM idfacturas");
            rs2.next();
            lastId = rs2.getInt(1);
            facturaID = String.format("%010d", lastId + 1);
            txtFacturaV.setText(facturaID);
            txtVendedorV.setText(Usuario);
            if(administrador){
                txtPrecio.setEditable(true);
            }else{
                txtPrecio.setEditable(false);
            
            }
            reloadTablaV();
            conexion.close();
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    private void bus(String text) {
       
        try {
            Connection conn = ConexionMySQL.obtenerConexion();
            PreparedStatement stmt = null;
            stmt = conn.prepareStatement("SELECT * FROM inven WHERE Producto LIKE ?");
            
            stmt.setString(1,"%"+text+"%");
            ResultSet rs = stmt.executeQuery();
            
            
            DefaultTableModel model = (DefaultTableModel) tblBuscar.getModel();
            model.setRowCount(0);
            double vtotal = 0;
            
            while (rs.next()) {
                
                String prod = rs.getString("Producto");
                String cod = rs.getString("Codigo");
                int can = rs.getInt("Cantidad");
                int preci = rs.getInt("Precio");
                
                Object[] fila={prod, cod, can, preci};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            conn.close();
            stmt.close();
            rs.close();
          
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void searchCode(String code) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void cambiarContra() throws SQLException {
        String us = txtUssChange.getText();
        String ps = txtPssChange.getText();
        if(!ps.isEmpty()){
            try{
             
                Connection conn = ConexionMySQL.obtenerConexion();
                String sql = "UPDATE users SET Password = ? WHERE User = ?";
                PreparedStatement statement = conn.prepareStatement(sql);
                statement.setString(1, ps);
                statement.setString(2, us);


                // Ejecutar la consulta SQL preparada
                int filasActualizadas = statement.executeUpdate();
                System.out.println(filasActualizadas + " filas actualizadas.");
                
                conn.close();
                
            } catch (SQLException e) {
                e.printStackTrace();
            }
            txtPssChange.setText("");
        }
    }

    private void reloadTablaUsers() {
       
         try (Connection conn = ConexionMySQL.obtenerConexion();
            Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM users");
            DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
            model.setRowCount(0);
            double vtotal = 0;
            
            while (rs.next()) {
                String us = rs.getString("User");
                String pss = rs.getString("Password");
                String passE = Base64.getEncoder().encodeToString(pss.getBytes());
                String priv = rs.getString("Privilegio");
                
                Object[] fila={us, passE, priv};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            /*NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            String cifraFormateada = nf.format(vtotal);
            lblTotal.setText(cifraFormateada);*/
            txtCU.setText("");
            txtCP.setText("");
            itemCPV.setSelectedItem("Vendedor");
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void updateUser() {
    
         Connection conn = null;
        if(!txtCU.getText().isEmpty() && !txtCP.getText().isEmpty()){
            String cu = txtCU.getText();
            String cp = txtCP.getText();
            String cpv = (String) itemCPV.getSelectedItem();
            try{
                
                conn = ConexionMySQL.obtenerConexion();

                PreparedStatement statement = conn.prepareStatement("INSERT INTO users (User, Password, Privilegio) VALUES (?, ?, ?)"+ "ON DUPLICATE KEY UPDATE Password = ?, Privilegio = ?");

                statement.setString(1, cu);
                statement.setString(2, cp);
                statement.setString(3, cpv);
                statement.setString(4, cp);
                statement.setString(5, cpv);
                
                int rowsInserted = statement.executeUpdate();
                reloadTablaUsers();
               
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }         
    }

    private void ajustarUsuario() {
    
        int row = tblUsers.getSelectedRow();
        
            
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
         //model.removeRow(row);
        String us = tblUsers.getValueAt(row, 0).toString();
        //String  pass = tblUsers.getValueAt(row, 1).toString();
        //String passE = Base64.getEncoder().encodeToString(pass.getBytes());
        
        String pri = tblUsers.getValueAt(row, 2).toString();
        
        
        txtCU.setText(us);
        txtCP.setText("");
        itemCPV.setSelectedItem(pri);
    }

    private void userSetting() {
        dialogUser.setVisible(true);
    }

    private void cargarGastos() {
        
         try {
                Connection conn = ConexionMySQL.obtenerConexion();
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM gastos WHERE Fecha BETWEEN ? AND ?");
            
            String[] fechaArrayd = txtFechaDC.getText().split("/");
            String fd = fechaArrayd[2]+"/"+fechaArrayd[1]+"/"+fechaArrayd[0];
            String[] fechaArrayh = txtFechaHC.getText().split("/");
            String fh = fechaArrayh[2]+"/"+fechaArrayh[1]+"/"+fechaArrayh[0];
            
            LocalDate fechad = LocalDate.parse(fd, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
            LocalDate fechah = LocalDate.parse(fh, DateTimeFormatter.ofPattern("yyyy/MM/dd"));

            // Crear un objeto java.sql.Date a partir de LocalDate
            java.sql.Date fechaDD = java.sql.Date.valueOf(fechad);
            java.sql.Date fechaHH = java.sql.Date.valueOf(fechah);
            
            stmt.setDate(1, fechaDD);
            stmt.setDate(2,fechaHH);
            
            ResultSet rs = stmt.executeQuery();
            
            DefaultTableModel model = (DefaultTableModel) tblGastos.getModel();
            model.setRowCount(0);
            //double vtotal = 0;
            float g1 = 0 ,g2 = 0, g3 = 0, g4 = 0 , g5 = 0, t = 0;
            while (rs.next()) {
                int id = rs.getInt("ID");
                g1 += rs.getFloat("Gasto1");
                g2 += rs.getFloat("Gasto2");
                g3 += rs.getFloat("Gasto3");
                g4 += rs.getFloat("Gasto4");
                g5 += rs.getFloat("Gasto5");
                String f = rs.getString("Fecha");
                
                ////double subtotal = pre * can;
                ////vtotal += subtotal/*(pre * can)*/;
                t = g1 + g2 + g3 + g4 + g5;
                
                
                
                
                // hacer algo con los valores recuperados
           }
            totalGas=t;
            mostrarGanancias();
            Object[] fila={g1, g2, g3, g4, g5, t};
            model.addRow(fila);
            NumberFormat nf = NumberFormat.getInstance(); // crear instancia de NumberFormat
            ///String cifraFormateada = nf.format(vtotal);
            ////lblTotal.setText(cifraFormateada);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void calcularProductos() {
       
        float productosComprados=0;
        float inversionesProductos=0;
        float productosVendidos=0;
        float gananciasProductos=0;
        try {
            // Establecer la conexión a la base de datos
            String[] fechaArrayd = txtFechaDC.getText().split("/");
            String fd = fechaArrayd[2]+"/"+fechaArrayd[1]+"/"+fechaArrayd[0];
            String[] fechaArrayh = txtFechaHC.getText().split("/");
            String fh = fechaArrayh[2]+"/"+fechaArrayh[1]+"/"+fechaArrayh[0];
            LocalDate fechad = LocalDate.parse(fd, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
            LocalDate fechah = LocalDate.parse(fh, DateTimeFormatter.ofPattern("yyyy/MM/dd"));

            // Crear un objeto java.sql.Date a partir de LocalDate
            java.sql.Date fechaDD = java.sql.Date.valueOf(fechad);
            java.sql.Date fechaHH = java.sql.Date.valueOf(fechah);
            
            DefaultTableModel model = (DefaultTableModel) tblProductosC.getModel();
            model.setRowCount(0);
            
           
            
            Connection conexion = ConexionMySQL.obtenerConexion();

            // Crear la consulta SQL con dos cláusulas JOIN
            String query = "SELECT * FROM  idfacturas WHERE Fecha BETWEEN ? AND ? AND Estado = 'Activas'";

            // Crear un objeto Statement y ejecutar la consulta
            PreparedStatement statement = conexion.prepareStatement(query);
            statement.setDate(1,fechaDD);
            statement.setDate(2,fechaHH);
            ResultSet resultados = statement.executeQuery();

            // Procesar los resultados de la consulta
            while (resultados.next()) {
                // Leer los datos de las tres tablas
                int id = resultados.getInt("ID");
                
                String query2 = "SELECT * FROM  ventasp WHERE FacturaID = ?";

                // Crear un objeto Statement y ejecutar la consulta
                PreparedStatement statement2 =conexion.prepareStatement(query2);
                statement2.setString(1, resultados.getString("idFactura"));
                
                ResultSet resultados2 = statement2.executeQuery();
                float sto=0;
                int candd = 0;
                // Procesar los resultados de la consulta
                while (resultados2.next()) {
                    int cantidad = resultados2.getInt("Cantidad");
                    float prec = resultados2.getFloat("PrecioCompra");
                    float prev = resultados2.getFloat("PrecioVenta");
                    sto += prev - prec;
                    //sto = sto * cantidad;
                    candd += cantidad;
                }
                productosVendidos += candd;
                gananciasProductos += sto;
                
            }
            // Cerrar la conexión y liberar recursos
            resultados.close();
            statement.close();
            String query3 = "SELECT * FROM  comprasp WHERE Fecha BETWEEN ? AND ?";

                // Crear un objeto Statement y ejecutar la consulta
                PreparedStatement statement3 =conexion.prepareStatement(query3);
                statement3.setDate(1,fechaDD);
                statement3.setDate(2,fechaHH);
                ResultSet resultados3 = statement3.executeQuery();
                float stoc=0;
                int canddc = 0;
                // Procesar los resultados de la consulta
                while (resultados3.next()) {
                    int can = resultados3.getInt("Cantidad");
                    float pc = resultados3.getFloat("PrecioCompra");
                    canddc += can;
                    stoc += pc*can;
                }
                productosComprados = canddc;
                inversionesProductos = stoc;
                DecimalFormat decimalFormat = new DecimalFormat("#,###");
                ///String formattedNumber = decimalFormat.format(number);
                Object[] fila={productosComprados, inversionesProductos, productosVendidos, gananciasProductos};
                model.addRow(fila);
                totalGan = gananciasProductos;
                mostrarGanancias();
            conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void mostrarGanancias() {
        
        float gann = totalGan - totalGas;
        NumberFormat nf = NumberFormat.getInstance(); 
        String cifraFormateada = nf.format(gann);
        
        if(gann < 0){
            lblTotalG.setForeground(Color.RED);
            
        }else{
        
            lblTotalG.setForeground(Color.BLACK);
        }
        lblTotalG.setText(cifraFormateada);
    }
    
    private void addWaste() throws SQLException{
        
        // Establecer conexión con la base de datos
        // Obtener el valor del campo de texto
        try{
            String[] fechaArray = txtFecha.getText().split("/");
            String f = fechaArray[2]+"/"+fechaArray[1]+"/"+fechaArray[0];
            String fechaTexto = f;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            String pen = txtpen.getText();
            String pr = txtpr.getText();
            String pl = txtpl.getText();
            String ps = txtps.getText();
            String po = txtpo.getText();
   
   
            // Convertir la cadena de fecha en un objeto LocalDate
            LocalDate fecha = LocalDate.parse(fechaTexto, formatter);

            // Obtener el mes y el año de la fecha
            int mes = fecha.getMonthValue();
            int anio = fecha.getYear();

            ///LocalDate fechaadd = LocalDate.parse(txtFecha.getText(), DateTimeFormatter.ofPattern("yyyy/MM/dd"));

                // Crear un objeto java.sql.Date a partir de LocalDate
            java.sql.Date fechaAdd = java.sql.Date.valueOf(fecha);


            // Verificar si ya existe un registro con la fecha específica en la tabla
            try (Connection con = ConexionMySQL.obtenerConexion()) {
                // Verificar si ya existe un registro con la fecha específica en la tabla
                String query = "SELECT COUNT(*) FROM gastos WHERE YEAR(Fecha) = ? AND MONTH(Fecha) = ?";
                PreparedStatement pstmt = con.prepareStatement(query);
                pstmt.setInt(1, anio); // año específico que quieres comprobar
                pstmt.setInt(2, mes); // mes específico que quieres comprobar (abril)
                ResultSet rs = pstmt.executeQuery();
                
                // Obtener el resultado de la consulta
                rs.next();
                int count = rs.getInt(1);
                
                // Si no hay registros con ese mes y año, realizar la inserción de los datos
                if (count == 0) {
                    String insertQuery = "INSERT INTO gastos (Gasto1, Gasto2, Gasto3, Gasto4, Gasto5, Fecha) VALUES (?, ?, ?, ?, ?, ?)";
                    PreparedStatement insertStmt = con.prepareStatement(insertQuery);
                    insertStmt.setFloat(1, Float.parseFloat(pen));
                    insertStmt.setFloat(2, Float.parseFloat(pr));
                    insertStmt.setFloat(3, Float.parseFloat(pl));
                    insertStmt.setFloat(4, Float.parseFloat(ps));
                    insertStmt.setFloat(5, Float.parseFloat(po));
                    insertStmt.setDate(6, fechaAdd);
                    insertStmt.executeUpdate();
                }else{
                    String insertQuery = "UPDATE gastos SET Gasto1=?, Gasto2=?, Gasto3=?, Gasto4=?, Gasto5=?, Fecha=? WHERE MONTH(Fecha) = ? AND YEAR(Fecha) = ?";
                    PreparedStatement insertStmt = con.prepareStatement(insertQuery);
                    insertStmt.setFloat(1, Float.parseFloat(pen));
                    insertStmt.setFloat(2, Float.parseFloat(pr));
                    insertStmt.setFloat(3, Float.parseFloat(pl));
                    insertStmt.setFloat(4, Float.parseFloat(ps));
                    insertStmt.setFloat(5, Float.parseFloat(po));
                    insertStmt.setDate(6, fechaAdd);
                    insertStmt.setInt(7, mes);
                    insertStmt.setInt(8, anio);
                    
                    
                    insertStmt.executeUpdate();
                
                
                }
                txtpen.setText("");
                txtpr.setText("");
                txtpl.setText("");
                txtps.setText("");
                txtpo.setText("");
                txtFecha.setText("");
                    // Cerrar la conexión y liberar recursos
                rs.close();
                pstmt.close();
                con.close();
                cargarGastos();
                
            }catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (DateTimeParseException e) {
            System.err.println("Error al parsear la fecha: " + e.getMessage());
        }
        
        

        
    }
    private void mostrarCompras(String fecha1, String fecha2) {
     
    
        try {
            Connection conn = ConexionMySQL.obtenerConexion();
            PreparedStatement stmt = null;
            stmt = conn.prepareStatement("SELECT * FROM comprasp WHERE Fecha BETWEEN ? AND ?");
            String[] fechaArray1 = fecha1.split("/");
            String fechad = fechaArray1[2]+"/"+fechaArray1[1]+"/"+fechaArray1[0];
            String[] fechaArray2 = fecha2.split("/");
            String fechah = fechaArray2[2]+"/"+fechaArray2[1]+"/"+fechaArray2[0];
            
            
            stmt.setString(1,fechad);
            stmt.setString(2,fechah);
            
            ResultSet rs = stmt.executeQuery();
            
            
            DefaultTableModel model = (DefaultTableModel) tblComprasRealizadas.getModel();
            model.setRowCount(0);
            double vtotal = 0;
            
            while (rs.next()) {
                String prod = rs.getString("Producto");
                PreparedStatement stmt1 = null;
                stmt1 = conn.prepareStatement("SELECT * FROM inven WHERE Producto = ?");
                
                stmt1.setString(1, prod);

                ResultSet rs1 = stmt1.executeQuery();

                int vendi =0;
                
                if(rs1.next()) {
                
                    vendi = rs1.getInt("Vendidos");
                }
                
                stmt1.close();
                rs1.close();
                
                int can = rs.getInt("Cantidad");
                
                float pc = rs.getFloat("PrecioCompra");
                float pv = rs.getFloat("PrecioVenta");
                String v = rs.getString("Vendedor");
               
                
                Object[] fila={prod, can, vendi, pc, pv, v};
                model.addRow(fila);
                // hacer algo con los valores recuperados
           }
            conn.close();
            stmt.close();
            rs.close();
          
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
    
    }
    
    private void actualizarCompra(){
        if(txtCPr.getText()!= "" && txtCC.getText()!= "" && txtHiddenCan.getText()!= "" && txtCPC.getText()!= "" && txtCV.getText()!= ""){
        
            String pro=txtCPr.getText();
            String can=txtCC.getText();
            
            String hcan=txtHiddenCan.getText();
            String pc=txtCPC.getText();
            String pv=txtCPV.getText();
            String v=txtCV.getText();
            String id = txtCId.getText();
            String hpro = txtHiddenPro.getText();
            
            Connection conn = null;
            PreparedStatement stmt = null;
            try {
                // Establecer la conexión con la base de datos
                conn = ConexionMySQL.obtenerConexion();

                
                
                /*PreparedStatement stmt12 = null;
        
        
                stmt12 = conn.prepareStatement("SELECT * FROM comprasp WHERE Fecha BETWEEN ? AND ?");
                
                //stmt12.setInt(3, row);

                ResultSet rs12= stmt12.executeQuery();



                
                while (rs12.next()) {
                
                
                }*/
                
                
                
                // Preparar la sentencia SQL DELETE
                String sql = "UPDATE inven SET Producto = ?, Cantidad = Cantidad - ? + ?, CompradoA = ?, Precio = ? WHERE Producto = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setString(1, pro);
                stmt.setInt(2, Integer.parseInt(hcan));
                stmt.setInt(3, Integer.parseInt(can));
                stmt.setFloat(4, Float.parseFloat(pc));
                stmt.setFloat(5, Float.parseFloat(pv));
                //stmt.setString(5, v);
                stmt.setString(6, hpro);
                
                
                
                

                // Establecer el valor del parámetro en el número de fila eliminado
                //stmt.setString(1, );
                // Ejecutar la sentencia SQL DELETE
                stmt.executeUpdate();
                
                
                //System.out.println("Conexión establecida.");
                /*Statement stmt2 =  conn.createStatement();
                
                ResultSet rs2 = stmt2.executeQuery("SELECT CompradoA FROM inven");
                rs2.next();
                Float precioCompra = rs2.getFloat(1);
                stmt2.close();
                rs2.close();
                */
                String sql2 = "UPDATE comprasp SET Producto = ?, Cantidad = ?, PrecioCompra = ?, PrecioVenta = ?, Vendedor = ? WHERE ID = ?";
                PreparedStatement stmt2 = conn.prepareStatement(sql2);
                //stmt2.setInt(1, Integer.parseInt(hcan));
                stmt2.setString(1, pro);
                stmt2.setInt(2, Integer.parseInt(can));
                stmt2.setFloat(3, Float.parseFloat(pc));
                stmt2.setFloat(4, Float.parseFloat(pv));
                stmt2.setString(5, v);
                stmt2.setInt(6, Integer.parseInt(id));

                stmt2.executeUpdate();

                stmt2.close();
                conn.close();
                txtCPr.setText("");
                txtCC.setText("");
                txtCPC.setText("");
                txtCPV.setText("");
                txtCV.setText("");
                txtHiddenCan.setText("");

                reloadTablaI();
                mostrarCompras(txtFecha1C.getText(), txtFecha2C.getText());
            } catch (SQLException e) {
                e.printStackTrace();
            } 
        }
    
    }
    
    private void corregirCompra() throws SQLException {
       
        int row = tblComprasRealizadas.getSelectedRow();
        
            
        DefaultTableModel model = (DefaultTableModel) tblComprasRealizadas.getModel();
         //model.removeRow(row);
        String prod = tblComprasRealizadas.getValueAt(row, 0).toString();
        String  can = tblComprasRealizadas.getValueAt(row, 1).toString();
        String ven = tblComprasRealizadas.getValueAt(row, 2).toString();
        String pc = tblComprasRealizadas.getValueAt(row, 3).toString();
        String pv = tblComprasRealizadas.getValueAt(row, 4).toString();
        String v = tblComprasRealizadas.getValueAt(row, 5).toString();
        int vendidos=Integer.parseInt(ven);
        txtCPr.setText(prod);
        if(vendidos == 0){
            txtCPr.setEditable(true);
        }else{txtCPr.setEditable(false);}
        txtCC.setText(can);
        txtCPC.setText(pc);
        txtCPV.setText(pv);
        txtCV.setText(v);
        txtHiddenCan.setText(can);
        txtHiddenPro.setText(prod);
        
        
    
        try {
            Connection conn = ConexionMySQL.obtenerConexion();
            PreparedStatement stmt12 = null;
        
        
            stmt12 = conn.prepareStatement("SELECT * FROM comprasp WHERE Fecha BETWEEN ? AND ?");
            String[] fechaArray1 = txtFecha1C.getText().split("/");
            String fechad = fechaArray1[2]+"/"+fechaArray1[1]+"/"+fechaArray1[0];
            
            String[] fechaArray2 = txtFecha2C.getText().split("/");
            
            String fechah = fechaArray2[2]+"/"+fechaArray2[1]+"/"+fechaArray2[0];
            
            stmt12.setString(1, fechad);
            stmt12.setString(2, fechah);
            //stmt12.setInt(3, row);
            
            ResultSet rs12= stmt12.executeQuery();
            
            
            
            double vtotal = 0;
            int limit =0;
            while (rs12.next()) {
                if(limit == row){
                    txtCId.setText(Integer.toString(rs12.getInt("ID")));
                }
                limit++;
            }
            conn.close();
            stmt12.close();
            rs12.close();
        
        }catch (SQLException e) {
            e.printStackTrace();
        }
        
        ///System.out.println(nombre);

            // Actualizar la vista del JTable
            //tblCarrito.revalidate();
        ////DeleteFila(nombre);
        
    }

    private void setFechaContabilidad() {
        
        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();
        // Obtener el primer día del mes
        LocalDate primerDiaMes = fechaActual.withDayOfMonth(1);
        
        // Formatear las fechas en el formato dd/mm/aaaa
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String fechaActualr = fechaActual.format(formato);
        String primerDia = primerDiaMes.format(formato);
        
        txtFechaDC.setText(primerDia);
        txtFechaHC.setText(fechaActualr);
        
        cargarGastos();
        calcularProductos();
        mostrarGanancias();
        
    }
    
    private void setFechaVentas() {
        
        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();
        // Obtener el primer día del mes
        // Formatear las fechas en el formato dd/mm/aaaa
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        
        String fechaActualr = fechaActual.format(formato);
       
        txtFechaDesdeVentas.setText(fechaActualr);
        txtFechaHastaVentas.setText(fechaActualr);
        
        loadTablaVentas();
        
    }

    private void DeleteFilaCom(String row) {
       
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            // Establecer la conexión con la base de datos
            conn = ConexionMySQL.obtenerConexion();

            // Preparar la sentencia SQL DELETE
            String sql = "DELETE FROM carrocompra WHERE Producto = ?";
            stmt = conn.prepareStatement(sql);

            // Establecer el valor del parámetro en el número de fila eliminado
            stmt.setString(1, row);

            // Ejecutar la sentencia SQL DELETE
            stmt.executeUpdate();
            
            reloadTablaComprar();
        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }
    
    private void searchCodeP(String code) {
    
        Connection conn = null;
        try {
            
            conn = ConexionMySQL.obtenerConexion();
            System.out.println("Conexión establecida.");
            String sql;
            PreparedStatement stmt = null;
            
      
            sql ="SELECT * FROM inven WHERE Codigo = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, code);
            
            ResultSet rs = stmt.executeQuery();
            int num_filas = 0;
            if(rs.next()) {
                //num_filas++;
                // hacer algo con los valores recuperados
                System.out.println("Producto encontrado.");
                txtProd.setText(rs.getString("Producto"));
                
                //spCantidad.set("1");
                txtCan.setText("1");
                txtPC.setText(rs.getString("CompradoA"));
                txtPV.setText(rs.getString("Precio"));
                

                //tranferencia();
            }
            stmt.close();
            rs.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

